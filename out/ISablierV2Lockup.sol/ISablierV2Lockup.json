{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "senderAmount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "recipientAmount",
          "type": "uint128"
        }
      ],
      "name": "CancelLockupStream",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "protocolRevenues",
          "type": "uint128"
        }
      ],
      "name": "ClaimProtocolRevenues",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "RenounceLockupStream",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ISablierV2Comptroller",
          "name": "oldComptroller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ISablierV2Comptroller",
          "name": "newComptroller",
          "type": "address"
        }
      ],
      "name": "SetComptroller",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ISablierV2NFTDescriptor",
          "name": "oldNFTDescriptor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ISablierV2NFTDescriptor",
          "name": "newNFTDescriptor",
          "type": "address"
        }
      ],
      "name": "SetNFTDescriptor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "TransferAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        }
      ],
      "name": "WithdrawFromLockupStream",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_FEE",
      "outputs": [
        {
          "internalType": "UD60x18",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "streamIds",
          "type": "uint256[]"
        }
      ],
      "name": "cancelMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "claimProtocolRevenues",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptroller",
      "outputs": [
        {
          "internalType": "contract ISablierV2Comptroller",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "getAsset",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "asset",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "getDepositedAmount",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "depositedAmount",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "getEndTime",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "endTime",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "getRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "getRefundedAmount",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "refundedAmount",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "getSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "getStartTime",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "startTime",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "getWithdrawnAmount",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "withdrawnAmount",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "isCancelable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "isCold",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "isDepleted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "isStream",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "isWarm",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextStreamId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "protocolRevenues",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "revenues",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "refundableAmountOf",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "refundableAmount",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "renounce",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISablierV2Comptroller",
          "name": "newComptroller",
          "type": "address"
        }
      ],
      "name": "setComptroller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISablierV2NFTDescriptor",
          "name": "newNFTDescriptor",
          "type": "address"
        }
      ],
      "name": "setNFTDescriptor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "statusOf",
      "outputs": [
        {
          "internalType": "enum Lockup.Status",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "streamedAmountOf",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "streamedAmount",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "wasCanceled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawMax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newRecipient",
          "type": "address"
        }
      ],
      "name": "withdrawMaxAndTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "streamIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint128[]",
          "name": "amounts",
          "type": "uint128[]"
        }
      ],
      "name": "withdrawMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "withdrawableAmountOf",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "withdrawableAmount",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "MAX_FEE()": "bc063e1a",
    "admin()": "f851a440",
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "burn(uint256)": "42966c68",
    "cancel(uint256)": "40e58ee5",
    "cancelMultiple(uint256[])": "8659c270",
    "claimProtocolRevenues(address)": "a6202bf2",
    "comptroller()": "5fe3b567",
    "getApproved(uint256)": "081812fc",
    "getAsset(uint256)": "eac8f5b8",
    "getDepositedAmount(uint256)": "a80fc071",
    "getEndTime(uint256)": "9067b677",
    "getRecipient(uint256)": "6d0cee75",
    "getRefundedAmount(uint256)": "d4dbd20b",
    "getSender(uint256)": "b971302a",
    "getStartTime(uint256)": "bc2be1be",
    "getWithdrawnAmount(uint256)": "d511609f",
    "isApprovedForAll(address,address)": "e985e9c5",
    "isCancelable(uint256)": "4857501f",
    "isCold(uint256)": "8f69b993",
    "isDepleted(uint256)": "425d30dd",
    "isStream(uint256)": "b8a3be66",
    "isWarm(uint256)": "1c1cdd4c",
    "name()": "06fdde03",
    "nextStreamId()": "1e99d569",
    "ownerOf(uint256)": "6352211e",
    "protocolRevenues(address)": "39a73c03",
    "refundableAmountOf(uint256)": "1400ecec",
    "renounce(uint256)": "7de6b1db",
    "safeTransferFrom(address,address,uint256)": "42842e0e",
    "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
    "setApprovalForAll(address,bool)": "a22cb465",
    "setComptroller(address)": "8bad38dd",
    "setNFTDescriptor(address)": "7cad6cd1",
    "statusOf(uint256)": "ad35efd4",
    "streamedAmountOf(uint256)": "4869e12d",
    "supportsInterface(bytes4)": "01ffc9a7",
    "symbol()": "95d89b41",
    "tokenURI(uint256)": "c87b56dd",
    "transferAdmin(address)": "75829def",
    "transferFrom(address,address,uint256)": "23b872dd",
    "wasCanceled(uint256)": "f590c176",
    "withdraw(uint256,address,uint128)": "fdd46d60",
    "withdrawMax(uint256,address)": "ea5ead19",
    "withdrawMaxAndTransfer(uint256,address)": "c156a11d",
    "withdrawMultiple(uint256[],address,uint128[])": "a2ffb897",
    "withdrawableAmountOf(uint256)": "d975dfed"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"senderAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"recipientAmount\",\"type\":\"uint128\"}],\"name\":\"CancelLockupStream\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"protocolRevenues\",\"type\":\"uint128\"}],\"name\":\"ClaimProtocolRevenues\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"RenounceLockupStream\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ISablierV2Comptroller\",\"name\":\"oldComptroller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ISablierV2Comptroller\",\"name\":\"newComptroller\",\"type\":\"address\"}],\"name\":\"SetComptroller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ISablierV2NFTDescriptor\",\"name\":\"oldNFTDescriptor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ISablierV2NFTDescriptor\",\"name\":\"newNFTDescriptor\",\"type\":\"address\"}],\"name\":\"SetNFTDescriptor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"TransferAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"WithdrawFromLockupStream\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"UD60x18\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"streamIds\",\"type\":\"uint256[]\"}],\"name\":\"cancelMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"claimProtocolRevenues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract ISablierV2Comptroller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getAsset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getDepositedAmount\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"depositedAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getEndTime\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"endTime\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getRefundedAmount\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"refundedAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getStartTime\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"startTime\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getWithdrawnAmount\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"withdrawnAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"isCancelable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"isCold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"isDepleted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"isStream\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"isWarm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextStreamId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"protocolRevenues\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"revenues\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"refundableAmountOf\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"refundableAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"renounce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISablierV2Comptroller\",\"name\":\"newComptroller\",\"type\":\"address\"}],\"name\":\"setComptroller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISablierV2NFTDescriptor\",\"name\":\"newNFTDescriptor\",\"type\":\"address\"}],\"name\":\"setNFTDescriptor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"statusOf\",\"outputs\":[{\"internalType\":\"enum Lockup.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"streamedAmountOf\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"streamedAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"wasCanceled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newRecipient\",\"type\":\"address\"}],\"name\":\"withdrawMaxAndTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"streamIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint128[]\",\"name\":\"amounts\",\"type\":\"uint128[]\"}],\"name\":\"withdrawMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"withdrawableAmountOf\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"withdrawableAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"CancelLockupStream(uint256,address,address,uint128,uint128)\":{\"params\":{\"recipient\":\"The address of the stream's recipient.\",\"recipientAmount\":\"The amount of assets left for the stream's recipient to withdraw, denoted in units of the asset's decimals.\",\"sender\":\"The address of the stream's sender.\",\"senderAmount\":\"The amount of assets refunded to the stream's sender, denoted in units of the asset's decimals.\",\"streamId\":\"The id of the stream.\"}},\"ClaimProtocolRevenues(address,address,uint128)\":{\"params\":{\"admin\":\"The address of the contract admin.\",\"asset\":\"The contract address of the ERC-20 asset the protocol revenues have been claimed for.\",\"protocolRevenues\":\"The amount of protocol revenues claimed, denoted in units of the asset's decimals.\"}},\"RenounceLockupStream(uint256)\":{\"params\":{\"streamId\":\"The id of the stream.\"}},\"SetComptroller(address,address,address)\":{\"params\":{\"admin\":\"The address of the contract admin.\",\"newComptroller\":\"The address of the new comptroller contract.\",\"oldComptroller\":\"The address of the old comptroller contract.\"}},\"SetNFTDescriptor(address,address,address)\":{\"params\":{\"admin\":\"The address of the current contract admin.\",\"newNFTDescriptor\":\"The address of the new NFT descriptor contract.\",\"oldNFTDescriptor\":\"The address of the old NFT descriptor contract.\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"},\"TransferAdmin(address,address)\":{\"params\":{\"newAdmin\":\"The address of the new admin.\",\"oldAdmin\":\"The address of the old admin.\"}},\"WithdrawFromLockupStream(uint256,address,uint128)\":{\"params\":{\"amount\":\"The amount of assets withdrawn, denoted in units of the asset's decimals.\",\"streamId\":\"The id of the stream.\",\"to\":\"The address that has received the withdrawn assets.\"}}},\"kind\":\"dev\",\"methods\":{\"MAX_FEE()\":{\"details\":\"This value is hard coded as a constant.\"},\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"burn(uint256)\":{\"details\":\"Emits a {Transfer} event. Requirements: - Must not be delegate called. - `streamId` must reference a depleted stream. - The NFT must exist. - `msg.sender` must be either the NFT owner or an approved third party.\",\"params\":{\"streamId\":\"The id of the stream NFT to burn.\"}},\"cancel(uint256)\":{\"details\":\"Emits a {Transfer}, {CancelLockupStream}, and {MetadataUpdate} event. Notes: - If there any assets left for the recipient to withdraw, the stream is marked as canceled. Otherwise, the stream is marked as depleted. - This function attempts to invoke a hook on either the sender or the recipient, depending on who `msg.sender` is, and if the resolved address is a contract. Requirements: - Must not be delegate called. - The stream must be warm and cancelable. - `msg.sender` must be either the stream's sender or the stream's recipient (i.e. the NFT owner).\",\"params\":{\"streamId\":\"The id of the stream to cancel.\"}},\"cancelMultiple(uint256[])\":{\"details\":\"Emits multiple {Transfer}, {CancelLockupStream}, and {MetadataUpdate} events. Notes: - Refer to the notes in {cancel}. Requirements: - All requirements from {cancel} must be met for each stream.\",\"params\":{\"streamIds\":\"The ids of the streams to cancel.\"}},\"claimProtocolRevenues(address)\":{\"details\":\"Emits a {ClaimProtocolRevenues} event. Requirements: - `msg.sender` must be the contract admin.\",\"params\":{\"asset\":\"The contract address of the ERC-20 asset for which to claim protocol revenues.\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"getAsset(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"getDepositedAmount(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"getEndTime(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"getRecipient(uint256)\":{\"details\":\"Reverts if the NFT has been burned.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"getRefundedAmount(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"getSender(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"getStartTime(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"getWithdrawnAmount(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"isCancelable(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"isCold(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"isDepleted(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"isStream(uint256)\":{\"details\":\"Does not revert if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"isWarm(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"protocolRevenues(address)\":{\"params\":{\"asset\":\"The contract address of the ERC-20 asset to query.\"}},\"refundableAmountOf(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"renounce(uint256)\":{\"details\":\"Emits a {RenounceLockupStream} and {MetadataUpdate} event. Notes: - This is an irreversible operation. - This function attempts to invoke a hook on the stream's recipient, provided that the recipient is a contract. Requirements: - Must not be delegate called. - `streamId` must reference a warm stream. - `msg.sender` must be the stream's sender. - The stream must be cancelable.\",\"params\":{\"streamId\":\"The id of the stream to renounce.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"setComptroller(address)\":{\"details\":\"Emits a {SetComptroller} event. Notes: - Does not revert if the comptroller is the same. Requirements: - `msg.sender` must be the contract admin.\",\"params\":{\"newComptroller\":\"The address of the new comptroller contract.\"}},\"setNFTDescriptor(address)\":{\"details\":\"Emits a {SetNFTDescriptor} and {BatchMetadataUpdate} event. Notes: - Does not revert if the NFT descriptor is the same. Requirements: - `msg.sender` must be the contract admin.\",\"params\":{\"newNFTDescriptor\":\"The address of the new NFT descriptor contract.\"}},\"statusOf(uint256)\":{\"params\":{\"streamId\":\"The stream id for the query.\"}},\"streamedAmountOf(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferAdmin(address)\":{\"details\":\"Notes: - Does not revert if the admin is the same. - This function can potentially leave the contract without an admin, thereby removing any functionality that is only available to the admin. Requirements: - `msg.sender` must be the contract admin.\",\"params\":{\"newAdmin\":\"The address of the new admin.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"},\"wasCanceled(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"withdraw(uint256,address,uint128)\":{\"details\":\"Emits a {Transfer}, {WithdrawFromLockupStream}, and {MetadataUpdate} event. Notes: - This function attempts to invoke a hook on the stream's recipient, provided that the recipient is a contract and `msg.sender` is either the sender or an approved operator. Requirements: - Must not be delegate called. - `streamId` must not reference a null or depleted stream. - `msg.sender` must be the stream's sender, the stream's recipient or an approved third party. - `to` must be the recipient if `msg.sender` is the stream's sender. - `to` must not be the zero address. - `amount` must be greater than zero and must not exceed the withdrawable amount.\",\"params\":{\"amount\":\"The amount to withdraw, denoted in units of the asset's decimals.\",\"streamId\":\"The id of the stream to withdraw from.\",\"to\":\"The address receiving the withdrawn assets.\"}},\"withdrawMax(uint256,address)\":{\"details\":\"Emits a {Transfer}, {WithdrawFromLockupStream}, and {MetadataUpdate} event. Notes: - Refer to the notes in {withdraw}. Requirements: - Refer to the requirements in {withdraw}.\",\"params\":{\"streamId\":\"The id of the stream to withdraw from.\",\"to\":\"The address receiving the withdrawn assets.\"}},\"withdrawMaxAndTransfer(uint256,address)\":{\"details\":\"Emits a {WithdrawFromLockupStream} and a {Transfer} event. Notes: - If the withdrawable amount is zero, the withdrawal is skipped. - Refer to the notes in {withdraw}. Requirements: - `msg.sender` must be the stream's recipient. - Refer to the requirements in {withdraw}. - Refer to the requirements in {IERC721.transferFrom}.\",\"params\":{\"newRecipient\":\"The address of the new owner of the stream NFT.\",\"streamId\":\"The id of the stream NFT to transfer.\"}},\"withdrawMultiple(uint256[],address,uint128[])\":{\"details\":\"Emits multiple {Transfer}, {WithdrawFromLockupStream}, and {MetadataUpdate} events. Notes: - This function attempts to call a hook on the recipient of each stream, unless `msg.sender` is the recipient. Requirements: - All requirements from {withdraw} must be met for each stream. - There must be an equal number of `streamIds` and `amounts`.\",\"params\":{\"amounts\":\"The amounts to withdraw, denoted in units of the asset's decimals.\",\"streamIds\":\"The ids of the streams to withdraw from.\",\"to\":\"The address receiving the withdrawn assets.\"}},\"withdrawableAmountOf(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}}},\"title\":\"ISablierV2Lockup\",\"version\":1},\"userdoc\":{\"events\":{\"CancelLockupStream(uint256,address,address,uint128,uint128)\":{\"notice\":\"Emitted when a stream is canceled.\"},\"ClaimProtocolRevenues(address,address,uint128)\":{\"notice\":\"Emitted when the admin claims all protocol revenues accrued for a particular ERC-20 asset.\"},\"RenounceLockupStream(uint256)\":{\"notice\":\"Emitted when a sender gives up the right to cancel a stream.\"},\"SetComptroller(address,address,address)\":{\"notice\":\"Emitted when the admin sets a new comptroller contract.\"},\"SetNFTDescriptor(address,address,address)\":{\"notice\":\"Emitted when the admin sets a new NFT descriptor contract.\"},\"TransferAdmin(address,address)\":{\"notice\":\"Emitted when the admin is transferred.\"},\"WithdrawFromLockupStream(uint256,address,uint128)\":{\"notice\":\"Emitted when assets are withdrawn from a stream.\"}},\"kind\":\"user\",\"methods\":{\"MAX_FEE()\":{\"notice\":\"Retrieves the maximum fee that can be charged by the protocol or a broker, denoted as a fixed-point number where 1e18 is 100%.\"},\"admin()\":{\"notice\":\"The address of the admin account or contract.\"},\"burn(uint256)\":{\"notice\":\"Burns the NFT associated with the stream.\"},\"cancel(uint256)\":{\"notice\":\"Cancels the stream and refunds any remaining assets to the sender.\"},\"cancelMultiple(uint256[])\":{\"notice\":\"Cancels multiple streams and refunds any remaining assets to the sender.\"},\"claimProtocolRevenues(address)\":{\"notice\":\"Claims all accumulated protocol revenues for the provided ERC-20 asset.\"},\"comptroller()\":{\"notice\":\"Retrieves the address of the comptroller contract, responsible for the Sablier V2 protocol configuration.\"},\"getAsset(uint256)\":{\"notice\":\"Retrieves the address of the ERC-20 asset used for streaming.\"},\"getDepositedAmount(uint256)\":{\"notice\":\"Retrieves the amount deposited in the stream, denoted in units of the asset's decimals.\"},\"getEndTime(uint256)\":{\"notice\":\"Retrieves the stream's end time, which is a Unix timestamp.\"},\"getRecipient(uint256)\":{\"notice\":\"Retrieves the stream's recipient.\"},\"getRefundedAmount(uint256)\":{\"notice\":\"Retrieves the amount refunded to the sender after a cancellation, denoted in units of the asset's decimals. This amount is always zero unless the stream was canceled.\"},\"getSender(uint256)\":{\"notice\":\"Retrieves the stream's sender.\"},\"getStartTime(uint256)\":{\"notice\":\"Retrieves the stream's start time, which is a Unix timestamp.\"},\"getWithdrawnAmount(uint256)\":{\"notice\":\"Retrieves the amount withdrawn from the stream, denoted in units of the asset's decimals.\"},\"isCancelable(uint256)\":{\"notice\":\"Retrieves a flag indicating whether the stream can be canceled. When the stream is cold, this flag is always `false`.\"},\"isCold(uint256)\":{\"notice\":\"Retrieves a flag indicating whether the stream is cold, i.e. settled, canceled, or depleted.\"},\"isDepleted(uint256)\":{\"notice\":\"Retrieves a flag indicating whether the stream is depleted.\"},\"isStream(uint256)\":{\"notice\":\"Retrieves a flag indicating whether the stream exists.\"},\"isWarm(uint256)\":{\"notice\":\"Retrieves a flag indicating whether the stream is warm, i.e. either pending or streaming.\"},\"nextStreamId()\":{\"notice\":\"Counter for stream ids, used in the create functions.\"},\"protocolRevenues(address)\":{\"notice\":\"Retrieves the protocol revenues accrued for the provided ERC-20 asset, in units of the asset's decimals.\"},\"refundableAmountOf(uint256)\":{\"notice\":\"Calculates the amount that the sender would be refunded if the stream were canceled, denoted in units of the asset's decimals.\"},\"renounce(uint256)\":{\"notice\":\"Removes the right of the stream's sender to cancel the stream.\"},\"setComptroller(address)\":{\"notice\":\"Assigns a new comptroller contract responsible for the protocol configuration.\"},\"setNFTDescriptor(address)\":{\"notice\":\"Sets a new NFT descriptor contract, which produces the URI describing the Sablier stream NFTs.\"},\"statusOf(uint256)\":{\"notice\":\"Retrieves the stream's status.\"},\"streamedAmountOf(uint256)\":{\"notice\":\"Calculates the amount streamed to the recipient, denoted in units of the asset's decimals.\"},\"transferAdmin(address)\":{\"notice\":\"Transfers the contract admin to a new address.\"},\"wasCanceled(uint256)\":{\"notice\":\"Retrieves a flag indicating whether the stream was canceled.\"},\"withdraw(uint256,address,uint128)\":{\"notice\":\"Withdraws the provided amount of assets from the stream to the `to` address.\"},\"withdrawMax(uint256,address)\":{\"notice\":\"Withdraws the maximum withdrawable amount from the stream to the provided address `to`.\"},\"withdrawMaxAndTransfer(uint256,address)\":{\"notice\":\"Withdraws the maximum withdrawable amount from the stream to the current recipient, and transfers the NFT to `newRecipient`.\"},\"withdrawMultiple(uint256[],address,uint128[])\":{\"notice\":\"Withdraws assets from streams to the provided address `to`.\"},\"withdrawableAmountOf(uint256)\":{\"notice\":\"Calculates the amount that the recipient can withdraw from the stream, denoted in units of the asset's decimals.\"}},\"notice\":\"Common logic between all Sablier V2 lockup streaming contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@sablier/v2-core/src/interfaces/ISablierV2Lockup.sol\":\"ISablierV2Lockup\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"appendCBOR\":false,\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@prb/=node_modules/@prb/\",\":@sablier/=node_modules/@sablier/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=node_modules/hardhat/\"]},\"sources\":{\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"node_modules/@prb/math/src/Common.sol\":{\"keccak256\":\"0x70b3a76443312b2c6c500996306a18e3d91e5d56fed0d898d98ca0bfb6225053\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be75b034b8c27e96b375e862528afb52a2d11e75c4a25918e10d7db31cdec039\",\"dweb:/ipfs/QmQ4L3tvpDx2ophHRAW7Sc52QhVZzn4e5PKTgLwqt32F1B\"]},\"node_modules/@prb/math/src/UD2x18.sol\":{\"keccak256\":\"0xfb624e24cd8bb790fa08e7827819de85504a86e20e961fa4ad126c65b6d90641\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dd795b8df250e7eedc68e2dba1afbb60357ce8f22f21bed212b5a9046d2057d2\",\"dweb:/ipfs/QmUHtrSr8Gb6bvSe2rCWPA5YrJq72UiJARYr1gZqFVRsYH\"]},\"node_modules/@prb/math/src/UD60x18.sol\":{\"keccak256\":\"0xb98c6f74275914d279e8af6c502c2b1f50d5f6e1ed418d3b0153f5a193206c48\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a750edde2955f160806a51083a12185fb04e20efca0e3a7ebd127dc1acc049a9\",\"dweb:/ipfs/QmeAre3mThopoQPB9mSXZq6jck59QZ7JbDFR83urd2SLvp\"]},\"node_modules/@prb/math/src/sd1x18/Casting.sol\":{\"keccak256\":\"0x9e49e2b37c1bb845861740805edaaef3fe951a7b96eef16ce84fbf76e8278670\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d3f65f257f9f516f2b40ca30b1c999819777111bd59a92376df6c5823453165a\",\"dweb:/ipfs/QmVQRKMS6ibv6x9qWXLJp2KZw9qs6Yz1sYZQWoSBQM8Pkz\"]},\"node_modules/@prb/math/src/sd1x18/Constants.sol\":{\"keccak256\":\"0xb51aab4a2ea76f530dccbf3b7d4af24c8f3ceef67f3c574b58650466ea924a3f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b9fccf58b2b69179a311f996f772d9bf255fd1d0de9ba69ab89b45ef81008770\",\"dweb:/ipfs/QmTYE7xmFqUzQ2o8SmCpMu2GxkBJLjTtSWngoe7JXzsv2D\"]},\"node_modules/@prb/math/src/sd1x18/Errors.sol\":{\"keccak256\":\"0x836cb42ba619ca369fd4765bc47fefc3c3621369c5861882af14660aca5057ee\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://58873bcebf7398f63c6d3f234073fb6739fe4fae87428010cd0bc1aa68f53499\",\"dweb:/ipfs/QmZSZ9z4ZQUGRc1TRiL2F9AL7ysnGRXwRtocMa2zhxHFDp\"]},\"node_modules/@prb/math/src/sd1x18/ValueType.sol\":{\"keccak256\":\"0x2f86f1aa9fca42f40808b51a879b406ac51817647bdb9642f8a79dd8fdb754a7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://31559dfc012ebe40fcdb38c45e7edfa16406f11c6ea219e8676749f20dbbb5dd\",\"dweb:/ipfs/QmXeYzF9hYQphVExJRp41Vkebrs51k7xgr3jXfKgdD87XC\"]},\"node_modules/@prb/math/src/sd59x18/Casting.sol\":{\"keccak256\":\"0x3b21b60ec2998c3ae32f647412da51d3683b3f183a807198cc8d157499484f99\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08a49ba7ebf592a89e1a81e5987351e7810e371f4c3d2356d9b5a9b58462c809\",\"dweb:/ipfs/QmcvyHaUzd74eYjcZWQgUDFJfYrU8kFohiB1H5cs8HgUDp\"]},\"node_modules/@prb/math/src/sd59x18/Constants.sol\":{\"keccak256\":\"0xe0a1ca1a7b5b2d637cff83a8caa3d2e67a6a34f7ee9df58a9ca5d5fa268c474a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3e9a6980e97a68f9148c350439bc0b3ca4126a4428752b151744097da3f650c8\",\"dweb:/ipfs/QmVRJqG378u46dnvjgYkcLjnvHW8yNv5ijLoUWPMGQscuC\"]},\"node_modules/@prb/math/src/sd59x18/Errors.sol\":{\"keccak256\":\"0x83ee24e41d235bc05cb641d2c5c16c67b17fa00e4593661a8d14350435d4df04\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40cedd66b7ba40126b2668c2fbe8ccd6ae88bd5853c205ac54f643e49acd31c1\",\"dweb:/ipfs/QmWZz7bsQceUUzJiURQE5XtfzNW2Ammiz2WSNsZGxCYT7a\"]},\"node_modules/@prb/math/src/sd59x18/Helpers.sol\":{\"keccak256\":\"0x208570f1657cf730cb6c3d81aa14030e0d45cf906cdedea5059369d7df4bb716\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c78ca900edafa9338d4e3649a55ab0c84f76468d8a22fb945ba6d01e70f8fed\",\"dweb:/ipfs/QmeP4hQYfNxcATd1FsasdD4ebyu2vrC9K1N68swxUJzzZD\"]},\"node_modules/@prb/math/src/sd59x18/Math.sol\":{\"keccak256\":\"0xedd0635769176ab99878a91ce267cee2ca107b30e6b0db10736573ff4d102868\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://51795a2077ea6f109656048530481bb10c7f2b29e868f9a02d7b134d1b30c787\",\"dweb:/ipfs/Qmb9wBJ5vPtKNbiz9bbWz8Ufs6qLJWKanyg1zmRmSwUVze\"]},\"node_modules/@prb/math/src/sd59x18/ValueType.sol\":{\"keccak256\":\"0xe03112d145dcd5863aff24e5f381debaae29d446acd5666f3d640e3d9af738d7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://abacb7cba4bd732c961cfe7d66c5eec924c7a9ffe0bf07fafc95b65a887071f6\",\"dweb:/ipfs/QmSBefftoSJDMdmp5CFAVvJjPHJXHhd11x1FzkcHQxLjoT\"]},\"node_modules/@prb/math/src/ud2x18/Casting.sol\":{\"keccak256\":\"0x07ec9a8adddfe6bf37f0d9ce7702c5620a6215340889701da0525ed190ccc099\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3500550c9ed259e5a876d14510d7e4a2226fac41e04535dddffaf9e3e6dc67e5\",\"dweb:/ipfs/QmbA5y7zdqsFELeNPj1WgkP28GXBcnfYajj3E6nangJo2F\"]},\"node_modules/@prb/math/src/ud2x18/Constants.sol\":{\"keccak256\":\"0xbd11da8ad79ffc8b7b8244c82632b0ca31970e190a8877ba1a69b4b8065dcea5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f0d3d5cb4711d83e0fe654b8338b6685b6e9d9f234c645813533129ae48fa14b\",\"dweb:/ipfs/QmZW47VmyizEwAxuv6tdeJmrMM58KvsiaRjidcBgqKg4CP\"]},\"node_modules/@prb/math/src/ud2x18/Errors.sol\":{\"keccak256\":\"0xdf1e22f0b4c8032bcc8b7f63fe3984e1387f3dc7b2e9ab381822249f75376d33\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://975f9beb25a1ebff9b29dd5555e1f4f14a4fbf178d15ebd3add5ed5f5985fdec\",\"dweb:/ipfs/QmbvTvdtSrZi7J4sJuv6zUsymT5UctJnx4DkGezXW25r59\"]},\"node_modules/@prb/math/src/ud2x18/ValueType.sol\":{\"keccak256\":\"0x2802edc9869db116a0b5c490cc5f8554742f747183fa30ac5e9c80bb967e61a1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e9657724f5032559c953cba61db0fbca71f6b50f51edb53a08f840cb74a36c95\",\"dweb:/ipfs/QmX2KF8v7ng13NaavyogM3SGR4jCMLUuqKkxFhtxvc7D7m\"]},\"node_modules/@prb/math/src/ud60x18/Casting.sol\":{\"keccak256\":\"0x5bb532da36921cbdac64d1f16de5d366ef1f664502e3b7c07d0ad06917551f85\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f0819da49f6a86a1fc2ece8e8a4292f8d102dc1043a1d0a545c26d020d1f36fe\",\"dweb:/ipfs/QmdzLoo99EBJv2GGiZZAAY8Bfr4ivFykzeSbpF48aJxFZ9\"]},\"node_modules/@prb/math/src/ud60x18/Constants.sol\":{\"keccak256\":\"0x2b80d26153d3fdcfb3a9ca772d9309d31ed1275f5b8b54c3ffb54d3652b37d90\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e3a6673a156f635db94dc176baaa7274db8f9bec4461cd1152596253550ee3b\",\"dweb:/ipfs/Qmc9zT4kNSbMYaXcnbxNVqmb3P3m46ieaQxkwxqLwsvRA5\"]},\"node_modules/@prb/math/src/ud60x18/Conversions.sol\":{\"keccak256\":\"0xaf7fc2523413822de3b66ba339fe2884fb3b8c6f6cf38ec90a2c3e3aae71df6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://655c9fe2434ca039b67277d753a60d39f2938260c716a36d24b591acf8c4fb75\",\"dweb:/ipfs/QmbygBAjCoFe9oUp9QkJ45jqctThk7VSmiSVLHV4Z3WHVe\"]},\"node_modules/@prb/math/src/ud60x18/Errors.sol\":{\"keccak256\":\"0xa8c60d4066248df22c49c882873efbc017344107edabc48c52209abbc39cb1e3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8fb7e1103309b4f99e95bb638850c0321272d57bd3e6b0a6331d699ff103cbaf\",\"dweb:/ipfs/QmfLFHjVJv4ibEvMmh46qC5nCbeCYSfXgCTDWQqfW3jnyB\"]},\"node_modules/@prb/math/src/ud60x18/Helpers.sol\":{\"keccak256\":\"0xf5faff881391d2c060029499a666cc5f0bea90a213150bb476fae8f02a5df268\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://76105fa22bb1b5f1fa99abf9c4fbc9577a02c7bc204f271754c407f0d75489f5\",\"dweb:/ipfs/QmVNGZSTniDuZus5DdbFubqJXCLtTaZit7YPm4ntjr5Lgr\"]},\"node_modules/@prb/math/src/ud60x18/Math.sol\":{\"keccak256\":\"0xafe12d658b5bb495226df1841cbfbcb25e9fc443c6d41a85b5ac6aa7ec79ea29\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://357d345f960581548f27fb43fb2320101033c053b949f5cb4d75390a058df205\",\"dweb:/ipfs/QmYjQwVdwCWZDNkxUD4T1nwieP38o4HWtYUYjAmfpFpg3y\"]},\"node_modules/@prb/math/src/ud60x18/ValueType.sol\":{\"keccak256\":\"0xdd873b5124180d9b71498b3a7fe93b1c08c368bec741f7d5f8e17f78a0b70f31\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7df6700f747dd01b2520a900a8d6b5a4d239b8063c31384f40921afe22295c29\",\"dweb:/ipfs/QmSPSPQJKNSzGJu2ri5EfWjcLfA2xDHfUehyBp4FpUu2qZ\"]},\"node_modules/@sablier/v2-core/src/interfaces/IAdminable.sol\":{\"keccak256\":\"0xecc2d5f08b737e1acd5f641de59b262831c520adf8cd7290d02efe39e0ae443e\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://13c159aa3a2db6e2be6f2483c7e001dc84360220bdaf9a38247c213529a2d885\",\"dweb:/ipfs/QmZTfUR2FTfnC3Rohe8ntEvDwyW3K3RfruHZ98Phi48BGH\"]},\"node_modules/@sablier/v2-core/src/interfaces/ISablierV2Base.sol\":{\"keccak256\":\"0xb12e58a05389c958f79ebe1667e167c1e0bb681a18ae534f5e454abbd66f6821\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://1c57fabd0290e38c73c88cbf09ffe1675f3d9367fbba72ad647fbe729f5fd9f7\",\"dweb:/ipfs/QmZ2ybkhNR8CzqMi5fwSUZodZ9otYBGR4pVDp7fk78KpAM\"]},\"node_modules/@sablier/v2-core/src/interfaces/ISablierV2Comptroller.sol\":{\"keccak256\":\"0xfe089975be90f0efeeafc9ac9dfa5c301ca1f5c178177ac5589a8483a0aa84a3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://c6b87d383df9fab91a62629107ebd44122d16de55a01c3996cbb155a1373bde7\",\"dweb:/ipfs/QmTLfmcHJh8ZYbLai1oAkjBak9fpMnv3HDaGoMQd3wFcNF\"]},\"node_modules/@sablier/v2-core/src/interfaces/ISablierV2Lockup.sol\":{\"keccak256\":\"0x0e37a224e498775d0e541d93f3be6cd78d57399be99d9b4885ac038c49d8e774\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://4d535aea117e7ff38552ccbbc9d435404a10299bab650e545c2c78a084aef246\",\"dweb:/ipfs/QmR6J7tFnv3mCKEHJoumGjYAJNvVEx1kjaTxwRuK3YTugo\"]},\"node_modules/@sablier/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol\":{\"keccak256\":\"0x35172718298221f3aac87424252e4eaf7480ce901fe9a7b92d8fdd871ecdad3a\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://39d0d2d17d3f6ec4313a6313e85af2fd8a861930a8563a2b8e9ba1da099c6d73\",\"dweb:/ipfs/QmQmKYkqnLJrfEyDT2YwiXyzhYG4SaHpu6gsaFePqp2hxV\"]},\"node_modules/@sablier/v2-core/src/types/DataTypes.sol\":{\"keccak256\":\"0x3b1d42a5fedf5e5de718aa289aec0f72ad7b1a0e2b16515460c24942a30e9694\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://555451f8704595a0973ade27d8d199c363366ff6346c5425d156d332ea7bfb3b\",\"dweb:/ipfs/QmYkAyestxNeonNgfPCKQkzKsproZV7U3UGhMX2TQumNr1\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.20+commit.a1b79de6"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ApprovalForAll",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint128",
              "name": "senderAmount",
              "type": "uint128",
              "indexed": false
            },
            {
              "internalType": "uint128",
              "name": "recipientAmount",
              "type": "uint128",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "CancelLockupStream",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "admin",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "contract IERC20",
              "name": "asset",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint128",
              "name": "protocolRevenues",
              "type": "uint128",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ClaimProtocolRevenues",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "RenounceLockupStream",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "admin",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "contract ISablierV2Comptroller",
              "name": "oldComptroller",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "contract ISablierV2Comptroller",
              "name": "newComptroller",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SetComptroller",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "admin",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "contract ISablierV2NFTDescriptor",
              "name": "oldNFTDescriptor",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "contract ISablierV2NFTDescriptor",
              "name": "newNFTDescriptor",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SetNFTDescriptor",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "oldAdmin",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newAdmin",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "TransferAdmin",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint128",
              "name": "amount",
              "type": "uint128",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "WithdrawFromLockupStream",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "MAX_FEE",
          "outputs": [
            {
              "internalType": "UD60x18",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "admin",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approve"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "burn"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "cancel"
        },
        {
          "inputs": [
            {
              "internalType": "uint256[]",
              "name": "streamIds",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "cancelMultiple"
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20",
              "name": "asset",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "claimProtocolRevenues"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "comptroller",
          "outputs": [
            {
              "internalType": "contract ISablierV2Comptroller",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getApproved",
          "outputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getAsset",
          "outputs": [
            {
              "internalType": "contract IERC20",
              "name": "asset",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getDepositedAmount",
          "outputs": [
            {
              "internalType": "uint128",
              "name": "depositedAmount",
              "type": "uint128"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getEndTime",
          "outputs": [
            {
              "internalType": "uint40",
              "name": "endTime",
              "type": "uint40"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRecipient",
          "outputs": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRefundedAmount",
          "outputs": [
            {
              "internalType": "uint128",
              "name": "refundedAmount",
              "type": "uint128"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getSender",
          "outputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getStartTime",
          "outputs": [
            {
              "internalType": "uint40",
              "name": "startTime",
              "type": "uint40"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getWithdrawnAmount",
          "outputs": [
            {
              "internalType": "uint128",
              "name": "withdrawnAmount",
              "type": "uint128"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isApprovedForAll",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isCancelable",
          "outputs": [
            {
              "internalType": "bool",
              "name": "result",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isCold",
          "outputs": [
            {
              "internalType": "bool",
              "name": "result",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isDepleted",
          "outputs": [
            {
              "internalType": "bool",
              "name": "result",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isStream",
          "outputs": [
            {
              "internalType": "bool",
              "name": "result",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isWarm",
          "outputs": [
            {
              "internalType": "bool",
              "name": "result",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "nextStreamId",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "ownerOf",
          "outputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20",
              "name": "asset",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "protocolRevenues",
          "outputs": [
            {
              "internalType": "uint128",
              "name": "revenues",
              "type": "uint128"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "refundableAmountOf",
          "outputs": [
            {
              "internalType": "uint128",
              "name": "refundableAmount",
              "type": "uint128"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "renounce"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setApprovalForAll"
        },
        {
          "inputs": [
            {
              "internalType": "contract ISablierV2Comptroller",
              "name": "newComptroller",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setComptroller"
        },
        {
          "inputs": [
            {
              "internalType": "contract ISablierV2NFTDescriptor",
              "name": "newNFTDescriptor",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setNFTDescriptor"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "statusOf",
          "outputs": [
            {
              "internalType": "enum Lockup.Status",
              "name": "status",
              "type": "uint8"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "streamedAmountOf",
          "outputs": [
            {
              "internalType": "uint128",
              "name": "streamedAmount",
              "type": "uint128"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "tokenURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newAdmin",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferAdmin"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "wasCanceled",
          "outputs": [
            {
              "internalType": "bool",
              "name": "result",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "amount",
              "type": "uint128"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdraw"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdrawMax"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "newRecipient",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdrawMaxAndTransfer"
        },
        {
          "inputs": [
            {
              "internalType": "uint256[]",
              "name": "streamIds",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint128[]",
              "name": "amounts",
              "type": "uint128[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdrawMultiple"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "withdrawableAmountOf",
          "outputs": [
            {
              "internalType": "uint128",
              "name": "withdrawableAmount",
              "type": "uint128"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "MAX_FEE()": {
            "details": "This value is hard coded as a constant."
          },
          "approve(address,uint256)": {
            "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
          },
          "balanceOf(address)": {
            "details": "Returns the number of tokens in ``owner``'s account."
          },
          "burn(uint256)": {
            "details": "Emits a {Transfer} event. Requirements: - Must not be delegate called. - `streamId` must reference a depleted stream. - The NFT must exist. - `msg.sender` must be either the NFT owner or an approved third party.",
            "params": {
              "streamId": "The id of the stream NFT to burn."
            }
          },
          "cancel(uint256)": {
            "details": "Emits a {Transfer}, {CancelLockupStream}, and {MetadataUpdate} event. Notes: - If there any assets left for the recipient to withdraw, the stream is marked as canceled. Otherwise, the stream is marked as depleted. - This function attempts to invoke a hook on either the sender or the recipient, depending on who `msg.sender` is, and if the resolved address is a contract. Requirements: - Must not be delegate called. - The stream must be warm and cancelable. - `msg.sender` must be either the stream's sender or the stream's recipient (i.e. the NFT owner).",
            "params": {
              "streamId": "The id of the stream to cancel."
            }
          },
          "cancelMultiple(uint256[])": {
            "details": "Emits multiple {Transfer}, {CancelLockupStream}, and {MetadataUpdate} events. Notes: - Refer to the notes in {cancel}. Requirements: - All requirements from {cancel} must be met for each stream.",
            "params": {
              "streamIds": "The ids of the streams to cancel."
            }
          },
          "claimProtocolRevenues(address)": {
            "details": "Emits a {ClaimProtocolRevenues} event. Requirements: - `msg.sender` must be the contract admin.",
            "params": {
              "asset": "The contract address of the ERC-20 asset for which to claim protocol revenues."
            }
          },
          "getApproved(uint256)": {
            "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
          },
          "getAsset(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "getDepositedAmount(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "getEndTime(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "getRecipient(uint256)": {
            "details": "Reverts if the NFT has been burned.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "getRefundedAmount(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "getSender(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "getStartTime(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "getWithdrawnAmount(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "isApprovedForAll(address,address)": {
            "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
          },
          "isCancelable(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "isCold(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "isDepleted(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "isStream(uint256)": {
            "details": "Does not revert if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "isWarm(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "name()": {
            "details": "Returns the token collection name."
          },
          "ownerOf(uint256)": {
            "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
          },
          "protocolRevenues(address)": {
            "params": {
              "asset": "The contract address of the ERC-20 asset to query."
            }
          },
          "refundableAmountOf(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "renounce(uint256)": {
            "details": "Emits a {RenounceLockupStream} and {MetadataUpdate} event. Notes: - This is an irreversible operation. - This function attempts to invoke a hook on the stream's recipient, provided that the recipient is a contract. Requirements: - Must not be delegate called. - `streamId` must reference a warm stream. - `msg.sender` must be the stream's sender. - The stream must be cancelable.",
            "params": {
              "streamId": "The id of the stream to renounce."
            }
          },
          "safeTransferFrom(address,address,uint256)": {
            "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
          },
          "safeTransferFrom(address,address,uint256,bytes)": {
            "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
          },
          "setApprovalForAll(address,bool)": {
            "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
          },
          "setComptroller(address)": {
            "details": "Emits a {SetComptroller} event. Notes: - Does not revert if the comptroller is the same. Requirements: - `msg.sender` must be the contract admin.",
            "params": {
              "newComptroller": "The address of the new comptroller contract."
            }
          },
          "setNFTDescriptor(address)": {
            "details": "Emits a {SetNFTDescriptor} and {BatchMetadataUpdate} event. Notes: - Does not revert if the NFT descriptor is the same. Requirements: - `msg.sender` must be the contract admin.",
            "params": {
              "newNFTDescriptor": "The address of the new NFT descriptor contract."
            }
          },
          "statusOf(uint256)": {
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "streamedAmountOf(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "supportsInterface(bytes4)": {
            "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
          },
          "symbol()": {
            "details": "Returns the token collection symbol."
          },
          "tokenURI(uint256)": {
            "details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
          },
          "transferAdmin(address)": {
            "details": "Notes: - Does not revert if the admin is the same. - This function can potentially leave the contract without an admin, thereby removing any functionality that is only available to the admin. Requirements: - `msg.sender` must be the contract admin.",
            "params": {
              "newAdmin": "The address of the new admin."
            }
          },
          "transferFrom(address,address,uint256)": {
            "details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
          },
          "wasCanceled(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "withdraw(uint256,address,uint128)": {
            "details": "Emits a {Transfer}, {WithdrawFromLockupStream}, and {MetadataUpdate} event. Notes: - This function attempts to invoke a hook on the stream's recipient, provided that the recipient is a contract and `msg.sender` is either the sender or an approved operator. Requirements: - Must not be delegate called. - `streamId` must not reference a null or depleted stream. - `msg.sender` must be the stream's sender, the stream's recipient or an approved third party. - `to` must be the recipient if `msg.sender` is the stream's sender. - `to` must not be the zero address. - `amount` must be greater than zero and must not exceed the withdrawable amount.",
            "params": {
              "amount": "The amount to withdraw, denoted in units of the asset's decimals.",
              "streamId": "The id of the stream to withdraw from.",
              "to": "The address receiving the withdrawn assets."
            }
          },
          "withdrawMax(uint256,address)": {
            "details": "Emits a {Transfer}, {WithdrawFromLockupStream}, and {MetadataUpdate} event. Notes: - Refer to the notes in {withdraw}. Requirements: - Refer to the requirements in {withdraw}.",
            "params": {
              "streamId": "The id of the stream to withdraw from.",
              "to": "The address receiving the withdrawn assets."
            }
          },
          "withdrawMaxAndTransfer(uint256,address)": {
            "details": "Emits a {WithdrawFromLockupStream} and a {Transfer} event. Notes: - If the withdrawable amount is zero, the withdrawal is skipped. - Refer to the notes in {withdraw}. Requirements: - `msg.sender` must be the stream's recipient. - Refer to the requirements in {withdraw}. - Refer to the requirements in {IERC721.transferFrom}.",
            "params": {
              "newRecipient": "The address of the new owner of the stream NFT.",
              "streamId": "The id of the stream NFT to transfer."
            }
          },
          "withdrawMultiple(uint256[],address,uint128[])": {
            "details": "Emits multiple {Transfer}, {WithdrawFromLockupStream}, and {MetadataUpdate} events. Notes: - This function attempts to call a hook on the recipient of each stream, unless `msg.sender` is the recipient. Requirements: - All requirements from {withdraw} must be met for each stream. - There must be an equal number of `streamIds` and `amounts`.",
            "params": {
              "amounts": "The amounts to withdraw, denoted in units of the asset's decimals.",
              "streamIds": "The ids of the streams to withdraw from.",
              "to": "The address receiving the withdrawn assets."
            }
          },
          "withdrawableAmountOf(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "MAX_FEE()": {
            "notice": "Retrieves the maximum fee that can be charged by the protocol or a broker, denoted as a fixed-point number where 1e18 is 100%."
          },
          "admin()": {
            "notice": "The address of the admin account or contract."
          },
          "burn(uint256)": {
            "notice": "Burns the NFT associated with the stream."
          },
          "cancel(uint256)": {
            "notice": "Cancels the stream and refunds any remaining assets to the sender."
          },
          "cancelMultiple(uint256[])": {
            "notice": "Cancels multiple streams and refunds any remaining assets to the sender."
          },
          "claimProtocolRevenues(address)": {
            "notice": "Claims all accumulated protocol revenues for the provided ERC-20 asset."
          },
          "comptroller()": {
            "notice": "Retrieves the address of the comptroller contract, responsible for the Sablier V2 protocol configuration."
          },
          "getAsset(uint256)": {
            "notice": "Retrieves the address of the ERC-20 asset used for streaming."
          },
          "getDepositedAmount(uint256)": {
            "notice": "Retrieves the amount deposited in the stream, denoted in units of the asset's decimals."
          },
          "getEndTime(uint256)": {
            "notice": "Retrieves the stream's end time, which is a Unix timestamp."
          },
          "getRecipient(uint256)": {
            "notice": "Retrieves the stream's recipient."
          },
          "getRefundedAmount(uint256)": {
            "notice": "Retrieves the amount refunded to the sender after a cancellation, denoted in units of the asset's decimals. This amount is always zero unless the stream was canceled."
          },
          "getSender(uint256)": {
            "notice": "Retrieves the stream's sender."
          },
          "getStartTime(uint256)": {
            "notice": "Retrieves the stream's start time, which is a Unix timestamp."
          },
          "getWithdrawnAmount(uint256)": {
            "notice": "Retrieves the amount withdrawn from the stream, denoted in units of the asset's decimals."
          },
          "isCancelable(uint256)": {
            "notice": "Retrieves a flag indicating whether the stream can be canceled. When the stream is cold, this flag is always `false`."
          },
          "isCold(uint256)": {
            "notice": "Retrieves a flag indicating whether the stream is cold, i.e. settled, canceled, or depleted."
          },
          "isDepleted(uint256)": {
            "notice": "Retrieves a flag indicating whether the stream is depleted."
          },
          "isStream(uint256)": {
            "notice": "Retrieves a flag indicating whether the stream exists."
          },
          "isWarm(uint256)": {
            "notice": "Retrieves a flag indicating whether the stream is warm, i.e. either pending or streaming."
          },
          "nextStreamId()": {
            "notice": "Counter for stream ids, used in the create functions."
          },
          "protocolRevenues(address)": {
            "notice": "Retrieves the protocol revenues accrued for the provided ERC-20 asset, in units of the asset's decimals."
          },
          "refundableAmountOf(uint256)": {
            "notice": "Calculates the amount that the sender would be refunded if the stream were canceled, denoted in units of the asset's decimals."
          },
          "renounce(uint256)": {
            "notice": "Removes the right of the stream's sender to cancel the stream."
          },
          "setComptroller(address)": {
            "notice": "Assigns a new comptroller contract responsible for the protocol configuration."
          },
          "setNFTDescriptor(address)": {
            "notice": "Sets a new NFT descriptor contract, which produces the URI describing the Sablier stream NFTs."
          },
          "statusOf(uint256)": {
            "notice": "Retrieves the stream's status."
          },
          "streamedAmountOf(uint256)": {
            "notice": "Calculates the amount streamed to the recipient, denoted in units of the asset's decimals."
          },
          "transferAdmin(address)": {
            "notice": "Transfers the contract admin to a new address."
          },
          "wasCanceled(uint256)": {
            "notice": "Retrieves a flag indicating whether the stream was canceled."
          },
          "withdraw(uint256,address,uint128)": {
            "notice": "Withdraws the provided amount of assets from the stream to the `to` address."
          },
          "withdrawMax(uint256,address)": {
            "notice": "Withdraws the maximum withdrawable amount from the stream to the provided address `to`."
          },
          "withdrawMaxAndTransfer(uint256,address)": {
            "notice": "Withdraws the maximum withdrawable amount from the stream to the current recipient, and transfers the NFT to `newRecipient`."
          },
          "withdrawMultiple(uint256[],address,uint128[])": {
            "notice": "Withdraws assets from streams to the provided address `to`."
          },
          "withdrawableAmountOf(uint256)": {
            "notice": "Calculates the amount that the recipient can withdraw from the stream, denoted in units of the asset's decimals."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@openzeppelin/=node_modules/@openzeppelin/",
        "@prb/=node_modules/@prb/",
        "@sablier/=node_modules/@sablier/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "eth-gas-reporter/=node_modules/eth-gas-reporter/",
        "forge-std/=lib/forge-std/src/",
        "hardhat/=node_modules/hardhat/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 10000
      },
      "metadata": {
        "bytecodeHash": "none",
        "appendCBOR": false
      },
      "compilationTarget": {
        "node_modules/@sablier/v2-core/src/interfaces/ISablierV2Lockup.sol": "ISablierV2Lockup"
      },
      "libraries": {}
    },
    "sources": {
      "node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305",
        "urls": [
          "bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5",
          "dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol": {
        "keccak256": "0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266",
        "urls": [
          "bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4",
          "dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
        "keccak256": "0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9",
        "urls": [
          "bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146",
          "dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
        "keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
        "urls": [
          "bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
          "dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/Common.sol": {
        "keccak256": "0x70b3a76443312b2c6c500996306a18e3d91e5d56fed0d898d98ca0bfb6225053",
        "urls": [
          "bzz-raw://be75b034b8c27e96b375e862528afb52a2d11e75c4a25918e10d7db31cdec039",
          "dweb:/ipfs/QmQ4L3tvpDx2ophHRAW7Sc52QhVZzn4e5PKTgLwqt32F1B"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/UD2x18.sol": {
        "keccak256": "0xfb624e24cd8bb790fa08e7827819de85504a86e20e961fa4ad126c65b6d90641",
        "urls": [
          "bzz-raw://dd795b8df250e7eedc68e2dba1afbb60357ce8f22f21bed212b5a9046d2057d2",
          "dweb:/ipfs/QmUHtrSr8Gb6bvSe2rCWPA5YrJq72UiJARYr1gZqFVRsYH"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/UD60x18.sol": {
        "keccak256": "0xb98c6f74275914d279e8af6c502c2b1f50d5f6e1ed418d3b0153f5a193206c48",
        "urls": [
          "bzz-raw://a750edde2955f160806a51083a12185fb04e20efca0e3a7ebd127dc1acc049a9",
          "dweb:/ipfs/QmeAre3mThopoQPB9mSXZq6jck59QZ7JbDFR83urd2SLvp"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/sd1x18/Casting.sol": {
        "keccak256": "0x9e49e2b37c1bb845861740805edaaef3fe951a7b96eef16ce84fbf76e8278670",
        "urls": [
          "bzz-raw://d3f65f257f9f516f2b40ca30b1c999819777111bd59a92376df6c5823453165a",
          "dweb:/ipfs/QmVQRKMS6ibv6x9qWXLJp2KZw9qs6Yz1sYZQWoSBQM8Pkz"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/sd1x18/Constants.sol": {
        "keccak256": "0xb51aab4a2ea76f530dccbf3b7d4af24c8f3ceef67f3c574b58650466ea924a3f",
        "urls": [
          "bzz-raw://b9fccf58b2b69179a311f996f772d9bf255fd1d0de9ba69ab89b45ef81008770",
          "dweb:/ipfs/QmTYE7xmFqUzQ2o8SmCpMu2GxkBJLjTtSWngoe7JXzsv2D"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/sd1x18/Errors.sol": {
        "keccak256": "0x836cb42ba619ca369fd4765bc47fefc3c3621369c5861882af14660aca5057ee",
        "urls": [
          "bzz-raw://58873bcebf7398f63c6d3f234073fb6739fe4fae87428010cd0bc1aa68f53499",
          "dweb:/ipfs/QmZSZ9z4ZQUGRc1TRiL2F9AL7ysnGRXwRtocMa2zhxHFDp"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/sd1x18/ValueType.sol": {
        "keccak256": "0x2f86f1aa9fca42f40808b51a879b406ac51817647bdb9642f8a79dd8fdb754a7",
        "urls": [
          "bzz-raw://31559dfc012ebe40fcdb38c45e7edfa16406f11c6ea219e8676749f20dbbb5dd",
          "dweb:/ipfs/QmXeYzF9hYQphVExJRp41Vkebrs51k7xgr3jXfKgdD87XC"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/sd59x18/Casting.sol": {
        "keccak256": "0x3b21b60ec2998c3ae32f647412da51d3683b3f183a807198cc8d157499484f99",
        "urls": [
          "bzz-raw://08a49ba7ebf592a89e1a81e5987351e7810e371f4c3d2356d9b5a9b58462c809",
          "dweb:/ipfs/QmcvyHaUzd74eYjcZWQgUDFJfYrU8kFohiB1H5cs8HgUDp"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/sd59x18/Constants.sol": {
        "keccak256": "0xe0a1ca1a7b5b2d637cff83a8caa3d2e67a6a34f7ee9df58a9ca5d5fa268c474a",
        "urls": [
          "bzz-raw://3e9a6980e97a68f9148c350439bc0b3ca4126a4428752b151744097da3f650c8",
          "dweb:/ipfs/QmVRJqG378u46dnvjgYkcLjnvHW8yNv5ijLoUWPMGQscuC"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/sd59x18/Errors.sol": {
        "keccak256": "0x83ee24e41d235bc05cb641d2c5c16c67b17fa00e4593661a8d14350435d4df04",
        "urls": [
          "bzz-raw://40cedd66b7ba40126b2668c2fbe8ccd6ae88bd5853c205ac54f643e49acd31c1",
          "dweb:/ipfs/QmWZz7bsQceUUzJiURQE5XtfzNW2Ammiz2WSNsZGxCYT7a"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/sd59x18/Helpers.sol": {
        "keccak256": "0x208570f1657cf730cb6c3d81aa14030e0d45cf906cdedea5059369d7df4bb716",
        "urls": [
          "bzz-raw://4c78ca900edafa9338d4e3649a55ab0c84f76468d8a22fb945ba6d01e70f8fed",
          "dweb:/ipfs/QmeP4hQYfNxcATd1FsasdD4ebyu2vrC9K1N68swxUJzzZD"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/sd59x18/Math.sol": {
        "keccak256": "0xedd0635769176ab99878a91ce267cee2ca107b30e6b0db10736573ff4d102868",
        "urls": [
          "bzz-raw://51795a2077ea6f109656048530481bb10c7f2b29e868f9a02d7b134d1b30c787",
          "dweb:/ipfs/Qmb9wBJ5vPtKNbiz9bbWz8Ufs6qLJWKanyg1zmRmSwUVze"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/sd59x18/ValueType.sol": {
        "keccak256": "0xe03112d145dcd5863aff24e5f381debaae29d446acd5666f3d640e3d9af738d7",
        "urls": [
          "bzz-raw://abacb7cba4bd732c961cfe7d66c5eec924c7a9ffe0bf07fafc95b65a887071f6",
          "dweb:/ipfs/QmSBefftoSJDMdmp5CFAVvJjPHJXHhd11x1FzkcHQxLjoT"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/ud2x18/Casting.sol": {
        "keccak256": "0x07ec9a8adddfe6bf37f0d9ce7702c5620a6215340889701da0525ed190ccc099",
        "urls": [
          "bzz-raw://3500550c9ed259e5a876d14510d7e4a2226fac41e04535dddffaf9e3e6dc67e5",
          "dweb:/ipfs/QmbA5y7zdqsFELeNPj1WgkP28GXBcnfYajj3E6nangJo2F"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/ud2x18/Constants.sol": {
        "keccak256": "0xbd11da8ad79ffc8b7b8244c82632b0ca31970e190a8877ba1a69b4b8065dcea5",
        "urls": [
          "bzz-raw://f0d3d5cb4711d83e0fe654b8338b6685b6e9d9f234c645813533129ae48fa14b",
          "dweb:/ipfs/QmZW47VmyizEwAxuv6tdeJmrMM58KvsiaRjidcBgqKg4CP"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/ud2x18/Errors.sol": {
        "keccak256": "0xdf1e22f0b4c8032bcc8b7f63fe3984e1387f3dc7b2e9ab381822249f75376d33",
        "urls": [
          "bzz-raw://975f9beb25a1ebff9b29dd5555e1f4f14a4fbf178d15ebd3add5ed5f5985fdec",
          "dweb:/ipfs/QmbvTvdtSrZi7J4sJuv6zUsymT5UctJnx4DkGezXW25r59"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/ud2x18/ValueType.sol": {
        "keccak256": "0x2802edc9869db116a0b5c490cc5f8554742f747183fa30ac5e9c80bb967e61a1",
        "urls": [
          "bzz-raw://e9657724f5032559c953cba61db0fbca71f6b50f51edb53a08f840cb74a36c95",
          "dweb:/ipfs/QmX2KF8v7ng13NaavyogM3SGR4jCMLUuqKkxFhtxvc7D7m"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/ud60x18/Casting.sol": {
        "keccak256": "0x5bb532da36921cbdac64d1f16de5d366ef1f664502e3b7c07d0ad06917551f85",
        "urls": [
          "bzz-raw://f0819da49f6a86a1fc2ece8e8a4292f8d102dc1043a1d0a545c26d020d1f36fe",
          "dweb:/ipfs/QmdzLoo99EBJv2GGiZZAAY8Bfr4ivFykzeSbpF48aJxFZ9"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/ud60x18/Constants.sol": {
        "keccak256": "0x2b80d26153d3fdcfb3a9ca772d9309d31ed1275f5b8b54c3ffb54d3652b37d90",
        "urls": [
          "bzz-raw://7e3a6673a156f635db94dc176baaa7274db8f9bec4461cd1152596253550ee3b",
          "dweb:/ipfs/Qmc9zT4kNSbMYaXcnbxNVqmb3P3m46ieaQxkwxqLwsvRA5"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/ud60x18/Conversions.sol": {
        "keccak256": "0xaf7fc2523413822de3b66ba339fe2884fb3b8c6f6cf38ec90a2c3e3aae71df6b",
        "urls": [
          "bzz-raw://655c9fe2434ca039b67277d753a60d39f2938260c716a36d24b591acf8c4fb75",
          "dweb:/ipfs/QmbygBAjCoFe9oUp9QkJ45jqctThk7VSmiSVLHV4Z3WHVe"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/ud60x18/Errors.sol": {
        "keccak256": "0xa8c60d4066248df22c49c882873efbc017344107edabc48c52209abbc39cb1e3",
        "urls": [
          "bzz-raw://8fb7e1103309b4f99e95bb638850c0321272d57bd3e6b0a6331d699ff103cbaf",
          "dweb:/ipfs/QmfLFHjVJv4ibEvMmh46qC5nCbeCYSfXgCTDWQqfW3jnyB"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/ud60x18/Helpers.sol": {
        "keccak256": "0xf5faff881391d2c060029499a666cc5f0bea90a213150bb476fae8f02a5df268",
        "urls": [
          "bzz-raw://76105fa22bb1b5f1fa99abf9c4fbc9577a02c7bc204f271754c407f0d75489f5",
          "dweb:/ipfs/QmVNGZSTniDuZus5DdbFubqJXCLtTaZit7YPm4ntjr5Lgr"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/ud60x18/Math.sol": {
        "keccak256": "0xafe12d658b5bb495226df1841cbfbcb25e9fc443c6d41a85b5ac6aa7ec79ea29",
        "urls": [
          "bzz-raw://357d345f960581548f27fb43fb2320101033c053b949f5cb4d75390a058df205",
          "dweb:/ipfs/QmYjQwVdwCWZDNkxUD4T1nwieP38o4HWtYUYjAmfpFpg3y"
        ],
        "license": "MIT"
      },
      "node_modules/@prb/math/src/ud60x18/ValueType.sol": {
        "keccak256": "0xdd873b5124180d9b71498b3a7fe93b1c08c368bec741f7d5f8e17f78a0b70f31",
        "urls": [
          "bzz-raw://7df6700f747dd01b2520a900a8d6b5a4d239b8063c31384f40921afe22295c29",
          "dweb:/ipfs/QmSPSPQJKNSzGJu2ri5EfWjcLfA2xDHfUehyBp4FpUu2qZ"
        ],
        "license": "MIT"
      },
      "node_modules/@sablier/v2-core/src/interfaces/IAdminable.sol": {
        "keccak256": "0xecc2d5f08b737e1acd5f641de59b262831c520adf8cd7290d02efe39e0ae443e",
        "urls": [
          "bzz-raw://13c159aa3a2db6e2be6f2483c7e001dc84360220bdaf9a38247c213529a2d885",
          "dweb:/ipfs/QmZTfUR2FTfnC3Rohe8ntEvDwyW3K3RfruHZ98Phi48BGH"
        ],
        "license": "GPL-3.0-or-later"
      },
      "node_modules/@sablier/v2-core/src/interfaces/ISablierV2Base.sol": {
        "keccak256": "0xb12e58a05389c958f79ebe1667e167c1e0bb681a18ae534f5e454abbd66f6821",
        "urls": [
          "bzz-raw://1c57fabd0290e38c73c88cbf09ffe1675f3d9367fbba72ad647fbe729f5fd9f7",
          "dweb:/ipfs/QmZ2ybkhNR8CzqMi5fwSUZodZ9otYBGR4pVDp7fk78KpAM"
        ],
        "license": "GPL-3.0-or-later"
      },
      "node_modules/@sablier/v2-core/src/interfaces/ISablierV2Comptroller.sol": {
        "keccak256": "0xfe089975be90f0efeeafc9ac9dfa5c301ca1f5c178177ac5589a8483a0aa84a3",
        "urls": [
          "bzz-raw://c6b87d383df9fab91a62629107ebd44122d16de55a01c3996cbb155a1373bde7",
          "dweb:/ipfs/QmTLfmcHJh8ZYbLai1oAkjBak9fpMnv3HDaGoMQd3wFcNF"
        ],
        "license": "GPL-3.0-or-later"
      },
      "node_modules/@sablier/v2-core/src/interfaces/ISablierV2Lockup.sol": {
        "keccak256": "0x0e37a224e498775d0e541d93f3be6cd78d57399be99d9b4885ac038c49d8e774",
        "urls": [
          "bzz-raw://4d535aea117e7ff38552ccbbc9d435404a10299bab650e545c2c78a084aef246",
          "dweb:/ipfs/QmR6J7tFnv3mCKEHJoumGjYAJNvVEx1kjaTxwRuK3YTugo"
        ],
        "license": "GPL-3.0-or-later"
      },
      "node_modules/@sablier/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol": {
        "keccak256": "0x35172718298221f3aac87424252e4eaf7480ce901fe9a7b92d8fdd871ecdad3a",
        "urls": [
          "bzz-raw://39d0d2d17d3f6ec4313a6313e85af2fd8a861930a8563a2b8e9ba1da099c6d73",
          "dweb:/ipfs/QmQmKYkqnLJrfEyDT2YwiXyzhYG4SaHpu6gsaFePqp2hxV"
        ],
        "license": "GPL-3.0-or-later"
      },
      "node_modules/@sablier/v2-core/src/types/DataTypes.sol": {
        "keccak256": "0x3b1d42a5fedf5e5de718aa289aec0f72ad7b1a0e2b16515460c24942a30e9694",
        "urls": [
          "bzz-raw://555451f8704595a0973ade27d8d199c363366ff6346c5425d156d332ea7bfb3b",
          "dweb:/ipfs/QmYkAyestxNeonNgfPCKQkzKsproZV7U3UGhMX2TQumNr1"
        ],
        "license": "GPL-3.0-or-later"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "node_modules/@sablier/v2-core/src/interfaces/ISablierV2Lockup.sol",
    "id": 59273,
    "exportedSymbols": {
      "IERC20": [
        45123
      ],
      "IERC721Metadata": [
        46648
      ],
      "ISablierV2Base": [
        58897
      ],
      "ISablierV2Lockup": [
        59272
      ],
      "ISablierV2NFTDescriptor": [
        59378
      ],
      "Lockup": [
        61014
      ]
    },
    "nodeType": "SourceUnit",
    "src": "45:14752:88",
    "nodes": [
      {
        "id": 58996,
        "nodeType": "PragmaDirective",
        "src": "45:25:88",
        "nodes": [],
        "literals": [
          "solidity",
          ">=",
          "0.8",
          ".19"
        ]
      },
      {
        "id": 58998,
        "nodeType": "ImportDirective",
        "src": "72:72:88",
        "nodes": [],
        "absolutePath": "node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 59273,
        "sourceUnit": 45124,
        "symbolAliases": [
          {
            "foreign": {
              "id": 58997,
              "name": "IERC20",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 45123,
              "src": "81:6:88",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 59000,
        "nodeType": "ImportDirective",
        "src": "145:102:88",
        "nodes": [],
        "absolutePath": "node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
        "file": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 59273,
        "sourceUnit": 46649,
        "symbolAliases": [
          {
            "foreign": {
              "id": 58999,
              "name": "IERC721Metadata",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 46648,
              "src": "154:15:88",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 59002,
        "nodeType": "ImportDirective",
        "src": "249:48:88",
        "nodes": [],
        "absolutePath": "node_modules/@sablier/v2-core/src/types/DataTypes.sol",
        "file": "../types/DataTypes.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 59273,
        "sourceUnit": 61187,
        "symbolAliases": [
          {
            "foreign": {
              "id": 59001,
              "name": "Lockup",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 61014,
              "src": "258:6:88",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 59004,
        "nodeType": "ImportDirective",
        "src": "298:54:88",
        "nodes": [],
        "absolutePath": "node_modules/@sablier/v2-core/src/interfaces/ISablierV2Base.sol",
        "file": "./ISablierV2Base.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 59273,
        "sourceUnit": 58898,
        "symbolAliases": [
          {
            "foreign": {
              "id": 59003,
              "name": "ISablierV2Base",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 58897,
              "src": "307:14:88",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 59006,
        "nodeType": "ImportDirective",
        "src": "353:72:88",
        "nodes": [],
        "absolutePath": "node_modules/@sablier/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol",
        "file": "./ISablierV2NFTDescriptor.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 59273,
        "sourceUnit": 59379,
        "symbolAliases": [
          {
            "foreign": {
              "id": 59005,
              "name": "ISablierV2NFTDescriptor",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 59378,
              "src": "362:23:88",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 59272,
        "nodeType": "ContractDefinition",
        "src": "531:14265:88",
        "nodes": [
          {
            "id": 59024,
            "nodeType": "EventDefinition",
            "src": "1365:195:88",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 59012,
              "nodeType": "StructuredDocumentation",
              "src": "867:493:88",
              "text": "@notice Emitted when a stream is canceled.\n @param streamId The id of the stream.\n @param sender The address of the stream's sender.\n @param recipient The address of the stream's recipient.\n @param senderAmount The amount of assets refunded to the stream's sender, denoted in units of the asset's\n decimals.\n @param recipientAmount The amount of assets left for the stream's recipient to withdraw, denoted in units of the\n asset's decimals."
            },
            "eventSelector": "2971bd77136e1a620a6b1eb4ad5edd190e9fd391b26bfc5dea50b882fc6b9fd2",
            "name": "CancelLockupStream",
            "nameLocation": "1371:18:88",
            "parameters": {
              "id": 59023,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59014,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "1415:8:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59024,
                  "src": "1399:24:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 59013,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1399:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 59016,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "sender",
                  "nameLocation": "1449:6:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59024,
                  "src": "1433:22:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 59015,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1433:7:88",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 59018,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "1481:9:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59024,
                  "src": "1465:25:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 59017,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1465:7:88",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 59020,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "senderAmount",
                  "nameLocation": "1508:12:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59024,
                  "src": "1500:20:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 59019,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "1500:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 59022,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "recipientAmount",
                  "nameLocation": "1538:15:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59024,
                  "src": "1530:23:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 59021,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "1530:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1389:170:88"
            }
          },
          {
            "id": 59029,
            "nodeType": "EventDefinition",
            "src": "1689:53:88",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 59025,
              "nodeType": "StructuredDocumentation",
              "src": "1566:118:88",
              "text": "@notice Emitted when a sender gives up the right to cancel a stream.\n @param streamId The id of the stream."
            },
            "eventSelector": "0eb069207093cd3e51cd1370d2d369770057fbe29947e577e5fb428c6c6fc78f",
            "name": "RenounceLockupStream",
            "nameLocation": "1695:20:88",
            "parameters": {
              "id": 59028,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59027,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "1732:8:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59029,
                  "src": "1716:24:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 59026,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1716:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1715:26:88"
            }
          },
          {
            "id": 59040,
            "nodeType": "EventDefinition",
            "src": "2047:144:88",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 59030,
              "nodeType": "StructuredDocumentation",
              "src": "1748:294:88",
              "text": "@notice Emitted when the admin sets a new NFT descriptor contract.\n @param admin The address of the current contract admin.\n @param oldNFTDescriptor The address of the old NFT descriptor contract.\n @param newNFTDescriptor The address of the new NFT descriptor contract."
            },
            "eventSelector": "a2548bd4b805e907c1558a47b5858324fe8bb4a2e1ddfca647eecbf65610eebc",
            "name": "SetNFTDescriptor",
            "nameLocation": "2053:16:88",
            "parameters": {
              "id": 59039,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59032,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "admin",
                  "nameLocation": "2095:5:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59040,
                  "src": "2079:21:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 59031,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2079:7:88",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 59035,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "oldNFTDescriptor",
                  "nameLocation": "2126:16:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59040,
                  "src": "2102:40:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ISablierV2NFTDescriptor_$59378",
                    "typeString": "contract ISablierV2NFTDescriptor"
                  },
                  "typeName": {
                    "id": 59034,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 59033,
                      "name": "ISablierV2NFTDescriptor",
                      "nameLocations": [
                        "2102:23:88"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 59378,
                      "src": "2102:23:88"
                    },
                    "referencedDeclaration": 59378,
                    "src": "2102:23:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ISablierV2NFTDescriptor_$59378",
                      "typeString": "contract ISablierV2NFTDescriptor"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 59038,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "newNFTDescriptor",
                  "nameLocation": "2168:16:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59040,
                  "src": "2144:40:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ISablierV2NFTDescriptor_$59378",
                    "typeString": "contract ISablierV2NFTDescriptor"
                  },
                  "typeName": {
                    "id": 59037,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 59036,
                      "name": "ISablierV2NFTDescriptor",
                      "nameLocations": [
                        "2144:23:88"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 59378,
                      "src": "2144:23:88"
                    },
                    "referencedDeclaration": 59378,
                    "src": "2144:23:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ISablierV2NFTDescriptor_$59378",
                      "typeString": "contract ISablierV2NFTDescriptor"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2069:121:88"
            }
          },
          {
            "id": 59049,
            "nodeType": "EventDefinition",
            "src": "2474:93:88",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 59041,
              "nodeType": "StructuredDocumentation",
              "src": "2197:272:88",
              "text": "@notice Emitted when assets are withdrawn from a stream.\n @param streamId The id of the stream.\n @param to The address that has received the withdrawn assets.\n @param amount The amount of assets withdrawn, denoted in units of the asset's decimals."
            },
            "eventSelector": "fa54f9f9bdcdd28778cbb9f78490df6691cc4e2729588e10f4cc0a26c465686a",
            "name": "WithdrawFromLockupStream",
            "nameLocation": "2480:24:88",
            "parameters": {
              "id": 59048,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59043,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "2521:8:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59049,
                  "src": "2505:24:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 59042,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2505:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 59045,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "2547:2:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59049,
                  "src": "2531:18:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 59044,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2531:7:88",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 59047,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "2559:6:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59049,
                  "src": "2551:14:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 59046,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "2551:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2504:62:88"
            }
          },
          {
            "id": 59058,
            "nodeType": "FunctionDefinition",
            "src": "2980:73:88",
            "nodes": [],
            "documentation": {
              "id": 59050,
              "nodeType": "StructuredDocumentation",
              "src": "2788:187:88",
              "text": "@notice Retrieves the address of the ERC-20 asset used for streaming.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "eac8f5b8",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getAsset",
            "nameLocation": "2989:8:88",
            "parameters": {
              "id": 59053,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59052,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "3006:8:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59058,
                  "src": "2998:16:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 59051,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2998:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2997:18:88"
            },
            "returnParameters": {
              "id": 59057,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59056,
                  "mutability": "mutable",
                  "name": "asset",
                  "nameLocation": "3046:5:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59058,
                  "src": "3039:12:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$45123",
                    "typeString": "contract IERC20"
                  },
                  "typeName": {
                    "id": 59055,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 59054,
                      "name": "IERC20",
                      "nameLocations": [
                        "3039:6:88"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 45123,
                      "src": "3039:6:88"
                    },
                    "referencedDeclaration": 45123,
                    "src": "3039:6:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$45123",
                      "typeString": "contract IERC20"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3038:14:88"
            },
            "scope": 59272,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 59066,
            "nodeType": "FunctionDefinition",
            "src": "3277:94:88",
            "nodes": [],
            "documentation": {
              "id": 59059,
              "nodeType": "StructuredDocumentation",
              "src": "3059:213:88",
              "text": "@notice Retrieves the amount deposited in the stream, denoted in units of the asset's decimals.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "a80fc071",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getDepositedAmount",
            "nameLocation": "3286:18:88",
            "parameters": {
              "id": 59062,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59061,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "3313:8:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59066,
                  "src": "3305:16:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 59060,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3305:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3304:18:88"
            },
            "returnParameters": {
              "id": 59065,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59064,
                  "mutability": "mutable",
                  "name": "depositedAmount",
                  "nameLocation": "3354:15:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59066,
                  "src": "3346:23:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 59063,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "3346:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3345:25:88"
            },
            "scope": 59272,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 59074,
            "nodeType": "FunctionDefinition",
            "src": "3567:77:88",
            "nodes": [],
            "documentation": {
              "id": 59067,
              "nodeType": "StructuredDocumentation",
              "src": "3377:185:88",
              "text": "@notice Retrieves the stream's end time, which is a Unix timestamp.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "9067b677",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getEndTime",
            "nameLocation": "3576:10:88",
            "parameters": {
              "id": 59070,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59069,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "3595:8:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59074,
                  "src": "3587:16:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 59068,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3587:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3586:18:88"
            },
            "returnParameters": {
              "id": 59073,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59072,
                  "mutability": "mutable",
                  "name": "endTime",
                  "nameLocation": "3635:7:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59074,
                  "src": "3628:14:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint40",
                    "typeString": "uint40"
                  },
                  "typeName": {
                    "id": 59071,
                    "name": "uint40",
                    "nodeType": "ElementaryTypeName",
                    "src": "3628:6:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint40",
                      "typeString": "uint40"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3627:16:88"
            },
            "scope": 59272,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 59082,
            "nodeType": "FunctionDefinition",
            "src": "3802:82:88",
            "nodes": [],
            "documentation": {
              "id": 59075,
              "nodeType": "StructuredDocumentation",
              "src": "3650:147:88",
              "text": "@notice Retrieves the stream's recipient.\n @dev Reverts if the NFT has been burned.\n @param streamId The stream id for the query."
            },
            "functionSelector": "6d0cee75",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getRecipient",
            "nameLocation": "3811:12:88",
            "parameters": {
              "id": 59078,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59077,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "3832:8:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59082,
                  "src": "3824:16:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 59076,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3824:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3823:18:88"
            },
            "returnParameters": {
              "id": 59081,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59080,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "3873:9:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59082,
                  "src": "3865:17:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 59079,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3865:7:88",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3864:19:88"
            },
            "scope": 59272,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 59090,
            "nodeType": "FunctionDefinition",
            "src": "4195:92:88",
            "nodes": [],
            "documentation": {
              "id": 59083,
              "nodeType": "StructuredDocumentation",
              "src": "3890:300:88",
              "text": "@notice Retrieves the amount refunded to the sender after a cancellation, denoted in units of the asset's\n decimals. This amount is always zero unless the stream was canceled.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "d4dbd20b",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getRefundedAmount",
            "nameLocation": "4204:17:88",
            "parameters": {
              "id": 59086,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59085,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "4230:8:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59090,
                  "src": "4222:16:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 59084,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4222:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4221:18:88"
            },
            "returnParameters": {
              "id": 59089,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59088,
                  "mutability": "mutable",
                  "name": "refundedAmount",
                  "nameLocation": "4271:14:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59090,
                  "src": "4263:22:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 59087,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "4263:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4262:24:88"
            },
            "scope": 59272,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 59098,
            "nodeType": "FunctionDefinition",
            "src": "4454:76:88",
            "nodes": [],
            "documentation": {
              "id": 59091,
              "nodeType": "StructuredDocumentation",
              "src": "4293:156:88",
              "text": "@notice Retrieves the stream's sender.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "b971302a",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getSender",
            "nameLocation": "4463:9:88",
            "parameters": {
              "id": 59094,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59093,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "4481:8:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59098,
                  "src": "4473:16:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 59092,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4473:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4472:18:88"
            },
            "returnParameters": {
              "id": 59097,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59096,
                  "mutability": "mutable",
                  "name": "sender",
                  "nameLocation": "4522:6:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59098,
                  "src": "4514:14:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 59095,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4514:7:88",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4513:16:88"
            },
            "scope": 59272,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 59106,
            "nodeType": "FunctionDefinition",
            "src": "4728:81:88",
            "nodes": [],
            "documentation": {
              "id": 59099,
              "nodeType": "StructuredDocumentation",
              "src": "4536:187:88",
              "text": "@notice Retrieves the stream's start time, which is a Unix timestamp.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "bc2be1be",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getStartTime",
            "nameLocation": "4737:12:88",
            "parameters": {
              "id": 59102,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59101,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "4758:8:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59106,
                  "src": "4750:16:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 59100,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4750:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4749:18:88"
            },
            "returnParameters": {
              "id": 59105,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59104,
                  "mutability": "mutable",
                  "name": "startTime",
                  "nameLocation": "4798:9:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59106,
                  "src": "4791:16:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint40",
                    "typeString": "uint40"
                  },
                  "typeName": {
                    "id": 59103,
                    "name": "uint40",
                    "nodeType": "ElementaryTypeName",
                    "src": "4791:6:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint40",
                      "typeString": "uint40"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4790:18:88"
            },
            "scope": 59272,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 59114,
            "nodeType": "FunctionDefinition",
            "src": "5035:94:88",
            "nodes": [],
            "documentation": {
              "id": 59107,
              "nodeType": "StructuredDocumentation",
              "src": "4815:215:88",
              "text": "@notice Retrieves the amount withdrawn from the stream, denoted in units of the asset's decimals.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "d511609f",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getWithdrawnAmount",
            "nameLocation": "5044:18:88",
            "parameters": {
              "id": 59110,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59109,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "5071:8:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59114,
                  "src": "5063:16:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 59108,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5063:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5062:18:88"
            },
            "returnParameters": {
              "id": 59113,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59112,
                  "mutability": "mutable",
                  "name": "withdrawnAmount",
                  "nameLocation": "5112:15:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59114,
                  "src": "5104:23:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 59111,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "5104:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5103:25:88"
            },
            "scope": 59272,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 59122,
            "nodeType": "FunctionDefinition",
            "src": "5391:76:88",
            "nodes": [],
            "documentation": {
              "id": 59115,
              "nodeType": "StructuredDocumentation",
              "src": "5135:251:88",
              "text": "@notice Retrieves a flag indicating whether the stream can be canceled. When the stream is cold, this\n flag is always `false`.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "4857501f",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isCancelable",
            "nameLocation": "5400:12:88",
            "parameters": {
              "id": 59118,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59117,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "5421:8:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59122,
                  "src": "5413:16:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 59116,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5413:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5412:18:88"
            },
            "returnParameters": {
              "id": 59121,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59120,
                  "mutability": "mutable",
                  "name": "result",
                  "nameLocation": "5459:6:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59122,
                  "src": "5454:11:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 59119,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5454:4:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5453:13:88"
            },
            "scope": 59272,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 59130,
            "nodeType": "FunctionDefinition",
            "src": "5696:70:88",
            "nodes": [],
            "documentation": {
              "id": 59123,
              "nodeType": "StructuredDocumentation",
              "src": "5473:218:88",
              "text": "@notice Retrieves a flag indicating whether the stream is cold, i.e. settled, canceled, or depleted.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "8f69b993",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isCold",
            "nameLocation": "5705:6:88",
            "parameters": {
              "id": 59126,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59125,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "5720:8:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59130,
                  "src": "5712:16:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 59124,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5712:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5711:18:88"
            },
            "returnParameters": {
              "id": 59129,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59128,
                  "mutability": "mutable",
                  "name": "result",
                  "nameLocation": "5758:6:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59130,
                  "src": "5753:11:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 59127,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5753:4:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5752:13:88"
            },
            "scope": 59272,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 59138,
            "nodeType": "FunctionDefinition",
            "src": "5962:74:88",
            "nodes": [],
            "documentation": {
              "id": 59131,
              "nodeType": "StructuredDocumentation",
              "src": "5772:185:88",
              "text": "@notice Retrieves a flag indicating whether the stream is depleted.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "425d30dd",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isDepleted",
            "nameLocation": "5971:10:88",
            "parameters": {
              "id": 59134,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59133,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "5990:8:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59138,
                  "src": "5982:16:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 59132,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5982:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5981:18:88"
            },
            "returnParameters": {
              "id": 59137,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59136,
                  "mutability": "mutable",
                  "name": "result",
                  "nameLocation": "6028:6:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59138,
                  "src": "6023:11:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 59135,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "6023:4:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6022:13:88"
            },
            "scope": 59272,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 59146,
            "nodeType": "FunctionDefinition",
            "src": "6235:72:88",
            "nodes": [],
            "documentation": {
              "id": 59139,
              "nodeType": "StructuredDocumentation",
              "src": "6042:188:88",
              "text": "@notice Retrieves a flag indicating whether the stream exists.\n @dev Does not revert if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "b8a3be66",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isStream",
            "nameLocation": "6244:8:88",
            "parameters": {
              "id": 59142,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59141,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "6261:8:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59146,
                  "src": "6253:16:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 59140,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6253:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6252:18:88"
            },
            "returnParameters": {
              "id": 59145,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59144,
                  "mutability": "mutable",
                  "name": "result",
                  "nameLocation": "6299:6:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59146,
                  "src": "6294:11:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 59143,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "6294:4:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6293:13:88"
            },
            "scope": 59272,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 59154,
            "nodeType": "FunctionDefinition",
            "src": "6533:70:88",
            "nodes": [],
            "documentation": {
              "id": 59147,
              "nodeType": "StructuredDocumentation",
              "src": "6313:215:88",
              "text": "@notice Retrieves a flag indicating whether the stream is warm, i.e. either pending or streaming.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "1c1cdd4c",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isWarm",
            "nameLocation": "6542:6:88",
            "parameters": {
              "id": 59150,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59149,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "6557:8:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59154,
                  "src": "6549:16:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 59148,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6549:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6548:18:88"
            },
            "returnParameters": {
              "id": 59153,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59152,
                  "mutability": "mutable",
                  "name": "result",
                  "nameLocation": "6595:6:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59154,
                  "src": "6590:11:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 59151,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "6590:4:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6589:13:88"
            },
            "scope": 59272,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 59160,
            "nodeType": "FunctionDefinition",
            "src": "6679:56:88",
            "nodes": [],
            "documentation": {
              "id": 59155,
              "nodeType": "StructuredDocumentation",
              "src": "6609:65:88",
              "text": "@notice Counter for stream ids, used in the create functions."
            },
            "functionSelector": "1e99d569",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "nextStreamId",
            "nameLocation": "6688:12:88",
            "parameters": {
              "id": 59156,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6700:2:88"
            },
            "returnParameters": {
              "id": 59159,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59158,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 59160,
                  "src": "6726:7:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 59157,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6726:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6725:9:88"
            },
            "scope": 59272,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 59168,
            "nodeType": "FunctionDefinition",
            "src": "7006:95:88",
            "nodes": [],
            "documentation": {
              "id": 59161,
              "nodeType": "StructuredDocumentation",
              "src": "6741:260:88",
              "text": "@notice Calculates the amount that the sender would be refunded if the stream were canceled, denoted in units\n of the asset's decimals.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "1400ecec",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "refundableAmountOf",
            "nameLocation": "7015:18:88",
            "parameters": {
              "id": 59164,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59163,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "7042:8:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59168,
                  "src": "7034:16:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 59162,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7034:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7033:18:88"
            },
            "returnParameters": {
              "id": 59167,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59166,
                  "mutability": "mutable",
                  "name": "refundableAmount",
                  "nameLocation": "7083:16:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59168,
                  "src": "7075:24:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 59165,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "7075:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7074:26:88"
            },
            "scope": 59272,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 59177,
            "nodeType": "FunctionDefinition",
            "src": "7207:81:88",
            "nodes": [],
            "documentation": {
              "id": 59169,
              "nodeType": "StructuredDocumentation",
              "src": "7107:95:88",
              "text": "@notice Retrieves the stream's status.\n @param streamId The stream id for the query."
            },
            "functionSelector": "ad35efd4",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "statusOf",
            "nameLocation": "7216:8:88",
            "parameters": {
              "id": 59172,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59171,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "7233:8:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59177,
                  "src": "7225:16:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 59170,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7225:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7224:18:88"
            },
            "returnParameters": {
              "id": 59176,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59175,
                  "mutability": "mutable",
                  "name": "status",
                  "nameLocation": "7280:6:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59177,
                  "src": "7266:20:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_Status_$61013",
                    "typeString": "enum Lockup.Status"
                  },
                  "typeName": {
                    "id": 59174,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 59173,
                      "name": "Lockup.Status",
                      "nameLocations": [
                        "7266:6:88",
                        "7273:6:88"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 61013,
                      "src": "7266:13:88"
                    },
                    "referencedDeclaration": 61013,
                    "src": "7266:13:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_Status_$61013",
                      "typeString": "enum Lockup.Status"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7265:22:88"
            },
            "scope": 59272,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 59185,
            "nodeType": "FunctionDefinition",
            "src": "7515:91:88",
            "nodes": [],
            "documentation": {
              "id": 59178,
              "nodeType": "StructuredDocumentation",
              "src": "7294:216:88",
              "text": "@notice Calculates the amount streamed to the recipient, denoted in units of the asset's decimals.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "4869e12d",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "streamedAmountOf",
            "nameLocation": "7524:16:88",
            "parameters": {
              "id": 59181,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59180,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "7549:8:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59185,
                  "src": "7541:16:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 59179,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7541:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7540:18:88"
            },
            "returnParameters": {
              "id": 59184,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59183,
                  "mutability": "mutable",
                  "name": "streamedAmount",
                  "nameLocation": "7590:14:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59185,
                  "src": "7582:22:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 59182,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "7582:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7581:24:88"
            },
            "scope": 59272,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 59193,
            "nodeType": "FunctionDefinition",
            "src": "7803:75:88",
            "nodes": [],
            "documentation": {
              "id": 59186,
              "nodeType": "StructuredDocumentation",
              "src": "7612:186:88",
              "text": "@notice Retrieves a flag indicating whether the stream was canceled.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "f590c176",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "wasCanceled",
            "nameLocation": "7812:11:88",
            "parameters": {
              "id": 59189,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59188,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "7832:8:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59193,
                  "src": "7824:16:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 59187,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7824:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7823:18:88"
            },
            "returnParameters": {
              "id": 59192,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59191,
                  "mutability": "mutable",
                  "name": "result",
                  "nameLocation": "7870:6:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59193,
                  "src": "7865:11:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 59190,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "7865:4:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7864:13:88"
            },
            "scope": 59272,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 59201,
            "nodeType": "FunctionDefinition",
            "src": "8135:99:88",
            "nodes": [],
            "documentation": {
              "id": 59194,
              "nodeType": "StructuredDocumentation",
              "src": "7884:246:88",
              "text": "@notice Calculates the amount that the recipient can withdraw from the stream, denoted in units of the asset's\n decimals.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "d975dfed",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawableAmountOf",
            "nameLocation": "8144:20:88",
            "parameters": {
              "id": 59197,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59196,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "8173:8:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59201,
                  "src": "8165:16:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 59195,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8165:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8164:18:88"
            },
            "returnParameters": {
              "id": 59200,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59199,
                  "mutability": "mutable",
                  "name": "withdrawableAmount",
                  "nameLocation": "8214:18:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59201,
                  "src": "8206:26:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 59198,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "8206:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8205:28:88"
            },
            "scope": 59272,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 59207,
            "nodeType": "FunctionDefinition",
            "src": "8862:41:88",
            "nodes": [],
            "documentation": {
              "id": 59202,
              "nodeType": "StructuredDocumentation",
              "src": "8457:400:88",
              "text": "@notice Burns the NFT associated with the stream.\n @dev Emits a {Transfer} event.\n Requirements:\n - Must not be delegate called.\n - `streamId` must reference a depleted stream.\n - The NFT must exist.\n - `msg.sender` must be either the NFT owner or an approved third party.\n @param streamId The id of the stream NFT to burn."
            },
            "functionSelector": "42966c68",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "burn",
            "nameLocation": "8871:4:88",
            "parameters": {
              "id": 59205,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59204,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "8884:8:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59207,
                  "src": "8876:16:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 59203,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8876:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8875:18:88"
            },
            "returnParameters": {
              "id": 59206,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8902:0:88"
            },
            "scope": 59272,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 59213,
            "nodeType": "FunctionDefinition",
            "src": "9722:43:88",
            "nodes": [],
            "documentation": {
              "id": 59208,
              "nodeType": "StructuredDocumentation",
              "src": "8909:808:88",
              "text": "@notice Cancels the stream and refunds any remaining assets to the sender.\n @dev Emits a {Transfer}, {CancelLockupStream}, and {MetadataUpdate} event.\n Notes:\n - If there any assets left for the recipient to withdraw, the stream is marked as canceled. Otherwise, the\n stream is marked as depleted.\n - This function attempts to invoke a hook on either the sender or the recipient, depending on who `msg.sender`\n is, and if the resolved address is a contract.\n Requirements:\n - Must not be delegate called.\n - The stream must be warm and cancelable.\n - `msg.sender` must be either the stream's sender or the stream's recipient (i.e. the NFT owner).\n @param streamId The id of the stream to cancel."
            },
            "functionSelector": "40e58ee5",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "cancel",
            "nameLocation": "9731:6:88",
            "parameters": {
              "id": 59211,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59210,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "9746:8:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59213,
                  "src": "9738:16:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 59209,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9738:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9737:18:88"
            },
            "returnParameters": {
              "id": 59212,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9764:0:88"
            },
            "scope": 59272,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 59220,
            "nodeType": "FunctionDefinition",
            "src": "10191:63:88",
            "nodes": [],
            "documentation": {
              "id": 59214,
              "nodeType": "StructuredDocumentation",
              "src": "9771:415:88",
              "text": "@notice Cancels multiple streams and refunds any remaining assets to the sender.\n @dev Emits multiple {Transfer}, {CancelLockupStream}, and {MetadataUpdate} events.\n Notes:\n - Refer to the notes in {cancel}.\n Requirements:\n - All requirements from {cancel} must be met for each stream.\n @param streamIds The ids of the streams to cancel."
            },
            "functionSelector": "8659c270",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "cancelMultiple",
            "nameLocation": "10200:14:88",
            "parameters": {
              "id": 59218,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59217,
                  "mutability": "mutable",
                  "name": "streamIds",
                  "nameLocation": "10234:9:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59220,
                  "src": "10215:28:88",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 59215,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "10215:7:88",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 59216,
                    "nodeType": "ArrayTypeName",
                    "src": "10215:9:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10214:30:88"
            },
            "returnParameters": {
              "id": 59219,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10253:0:88"
            },
            "scope": 59272,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 59226,
            "nodeType": "FunctionDefinition",
            "src": "10886:45:88",
            "nodes": [],
            "documentation": {
              "id": 59221,
              "nodeType": "StructuredDocumentation",
              "src": "10260:621:88",
              "text": "@notice Removes the right of the stream's sender to cancel the stream.\n @dev Emits a {RenounceLockupStream} and {MetadataUpdate} event.\n Notes:\n - This is an irreversible operation.\n - This function attempts to invoke a hook on the stream's recipient, provided that the recipient is a contract.\n Requirements:\n - Must not be delegate called.\n - `streamId` must reference a warm stream.\n - `msg.sender` must be the stream's sender.\n - The stream must be cancelable.\n @param streamId The id of the stream to renounce."
            },
            "functionSelector": "7de6b1db",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "renounce",
            "nameLocation": "10895:8:88",
            "parameters": {
              "id": 59224,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59223,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "10912:8:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59226,
                  "src": "10904:16:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 59222,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10904:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10903:18:88"
            },
            "returnParameters": {
              "id": 59225,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10930:0:88"
            },
            "scope": 59272,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 59233,
            "nodeType": "FunctionDefinition",
            "src": "11382:77:88",
            "nodes": [],
            "documentation": {
              "id": 59227,
              "nodeType": "StructuredDocumentation",
              "src": "10937:440:88",
              "text": "@notice Sets a new NFT descriptor contract, which produces the URI describing the Sablier stream NFTs.\n @dev Emits a {SetNFTDescriptor} and {BatchMetadataUpdate} event.\n Notes:\n - Does not revert if the NFT descriptor is the same.\n Requirements:\n - `msg.sender` must be the contract admin.\n @param newNFTDescriptor The address of the new NFT descriptor contract."
            },
            "functionSelector": "7cad6cd1",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setNFTDescriptor",
            "nameLocation": "11391:16:88",
            "parameters": {
              "id": 59231,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59230,
                  "mutability": "mutable",
                  "name": "newNFTDescriptor",
                  "nameLocation": "11432:16:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59233,
                  "src": "11408:40:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ISablierV2NFTDescriptor_$59378",
                    "typeString": "contract ISablierV2NFTDescriptor"
                  },
                  "typeName": {
                    "id": 59229,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 59228,
                      "name": "ISablierV2NFTDescriptor",
                      "nameLocations": [
                        "11408:23:88"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 59378,
                      "src": "11408:23:88"
                    },
                    "referencedDeclaration": 59378,
                    "src": "11408:23:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ISablierV2NFTDescriptor_$59378",
                      "typeString": "contract ISablierV2NFTDescriptor"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11407:42:88"
            },
            "returnParameters": {
              "id": 59232,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11458:0:88"
            },
            "scope": 59272,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 59243,
            "nodeType": "FunctionDefinition",
            "src": "12540:73:88",
            "nodes": [],
            "documentation": {
              "id": 59234,
              "nodeType": "StructuredDocumentation",
              "src": "11465:1070:88",
              "text": "@notice Withdraws the provided amount of assets from the stream to the `to` address.\n @dev Emits a {Transfer}, {WithdrawFromLockupStream}, and {MetadataUpdate} event.\n Notes:\n - This function attempts to invoke a hook on the stream's recipient, provided that the recipient is a contract\n and `msg.sender` is either the sender or an approved operator.\n Requirements:\n - Must not be delegate called.\n - `streamId` must not reference a null or depleted stream.\n - `msg.sender` must be the stream's sender, the stream's recipient or an approved third party.\n - `to` must be the recipient if `msg.sender` is the stream's sender.\n - `to` must not be the zero address.\n - `amount` must be greater than zero and must not exceed the withdrawable amount.\n @param streamId The id of the stream to withdraw from.\n @param to The address receiving the withdrawn assets.\n @param amount The amount to withdraw, denoted in units of the asset's decimals."
            },
            "functionSelector": "fdd46d60",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "withdraw",
            "nameLocation": "12549:8:88",
            "parameters": {
              "id": 59241,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59236,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "12566:8:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59243,
                  "src": "12558:16:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 59235,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12558:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 59238,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "12584:2:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59243,
                  "src": "12576:10:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 59237,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "12576:7:88",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 59240,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "12596:6:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59243,
                  "src": "12588:14:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 59239,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "12588:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12557:46:88"
            },
            "returnParameters": {
              "id": 59242,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12612:0:88"
            },
            "scope": 59272,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 59251,
            "nodeType": "FunctionDefinition",
            "src": "13101:60:88",
            "nodes": [],
            "documentation": {
              "id": 59244,
              "nodeType": "StructuredDocumentation",
              "src": "12619:477:88",
              "text": "@notice Withdraws the maximum withdrawable amount from the stream to the provided address `to`.\n @dev Emits a {Transfer}, {WithdrawFromLockupStream}, and {MetadataUpdate} event.\n Notes:\n - Refer to the notes in {withdraw}.\n Requirements:\n - Refer to the requirements in {withdraw}.\n @param streamId The id of the stream to withdraw from.\n @param to The address receiving the withdrawn assets."
            },
            "functionSelector": "ea5ead19",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawMax",
            "nameLocation": "13110:11:88",
            "parameters": {
              "id": 59249,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59246,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "13130:8:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59251,
                  "src": "13122:16:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 59245,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13122:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 59248,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "13148:2:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59251,
                  "src": "13140:10:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 59247,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "13140:7:88",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13121:30:88"
            },
            "returnParameters": {
              "id": 59250,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13160:0:88"
            },
            "scope": 59272,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 59259,
            "nodeType": "FunctionDefinition",
            "src": "13881:81:88",
            "nodes": [],
            "documentation": {
              "id": 59252,
              "nodeType": "StructuredDocumentation",
              "src": "13167:709:88",
              "text": "@notice Withdraws the maximum withdrawable amount from the stream to the current recipient, and transfers the\n NFT to `newRecipient`.\n @dev Emits a {WithdrawFromLockupStream} and a {Transfer} event.\n Notes:\n - If the withdrawable amount is zero, the withdrawal is skipped.\n - Refer to the notes in {withdraw}.\n Requirements:\n - `msg.sender` must be the stream's recipient.\n - Refer to the requirements in {withdraw}.\n - Refer to the requirements in {IERC721.transferFrom}.\n @param streamId The id of the stream NFT to transfer.\n @param newRecipient The address of the new owner of the stream NFT."
            },
            "functionSelector": "c156a11d",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawMaxAndTransfer",
            "nameLocation": "13890:22:88",
            "parameters": {
              "id": 59257,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59254,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "13921:8:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59259,
                  "src": "13913:16:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 59253,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13913:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 59256,
                  "mutability": "mutable",
                  "name": "newRecipient",
                  "nameLocation": "13939:12:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59259,
                  "src": "13931:20:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 59255,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "13931:7:88",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13912:40:88"
            },
            "returnParameters": {
              "id": 59258,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13961:0:88"
            },
            "scope": 59272,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 59271,
            "nodeType": "FunctionDefinition",
            "src": "14689:105:88",
            "nodes": [],
            "documentation": {
              "id": 59260,
              "nodeType": "StructuredDocumentation",
              "src": "13968:716:88",
              "text": "@notice Withdraws assets from streams to the provided address `to`.\n @dev Emits multiple {Transfer}, {WithdrawFromLockupStream}, and {MetadataUpdate} events.\n Notes:\n - This function attempts to call a hook on the recipient of each stream, unless `msg.sender` is the recipient.\n Requirements:\n - All requirements from {withdraw} must be met for each stream.\n - There must be an equal number of `streamIds` and `amounts`.\n @param streamIds The ids of the streams to withdraw from.\n @param to The address receiving the withdrawn assets.\n @param amounts The amounts to withdraw, denoted in units of the asset's decimals."
            },
            "functionSelector": "a2ffb897",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawMultiple",
            "nameLocation": "14698:16:88",
            "parameters": {
              "id": 59269,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59263,
                  "mutability": "mutable",
                  "name": "streamIds",
                  "nameLocation": "14734:9:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59271,
                  "src": "14715:28:88",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 59261,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "14715:7:88",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 59262,
                    "nodeType": "ArrayTypeName",
                    "src": "14715:9:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 59265,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "14753:2:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59271,
                  "src": "14745:10:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 59264,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "14745:7:88",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 59268,
                  "mutability": "mutable",
                  "name": "amounts",
                  "nameLocation": "14776:7:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 59271,
                  "src": "14757:26:88",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint128_$dyn_calldata_ptr",
                    "typeString": "uint128[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 59266,
                      "name": "uint128",
                      "nodeType": "ElementaryTypeName",
                      "src": "14757:7:88",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint128",
                        "typeString": "uint128"
                      }
                    },
                    "id": 59267,
                    "nodeType": "ArrayTypeName",
                    "src": "14757:9:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint128_$dyn_storage_ptr",
                      "typeString": "uint128[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14714:70:88"
            },
            "returnParameters": {
              "id": 59270,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "14793:0:88"
            },
            "scope": 59272,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 59008,
              "name": "ISablierV2Base",
              "nameLocations": [
                "565:14:88"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 58897,
              "src": "565:14:88"
            },
            "id": 59009,
            "nodeType": "InheritanceSpecifier",
            "src": "565:14:88"
          },
          {
            "baseName": {
              "id": 59010,
              "name": "IERC721Metadata",
              "nameLocations": [
                "610:15:88"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 46648,
              "src": "610:15:88"
            },
            "id": 59011,
            "nodeType": "InheritanceSpecifier",
            "src": "610:15:88"
          }
        ],
        "canonicalName": "ISablierV2Lockup",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 59007,
          "nodeType": "StructuredDocumentation",
          "src": "427:104:88",
          "text": "@title ISablierV2Lockup\n @notice Common logic between all Sablier V2 lockup streaming contracts."
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          59272,
          46648,
          46603,
          47312,
          58897,
          58825
        ],
        "name": "ISablierV2Lockup",
        "nameLocation": "541:16:88",
        "scope": 59273,
        "usedErrors": [],
        "usedEvents": [
          46502,
          46511,
          46520,
          58812,
          58848,
          58859,
          59024,
          59029,
          59040,
          59049
        ]
      }
    ],
    "license": "GPL-3.0-or-later"
  },
  "id": 88
}